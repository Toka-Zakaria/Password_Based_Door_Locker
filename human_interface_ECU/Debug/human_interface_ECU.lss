
human_interface_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  00800060  00003d84  00003e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001c4  008001c4  00003f7c  2**0
                  ALLOC
  3 .stab         00003408  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011cf  00000000  00000000  00007384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008553  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008693  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b337  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__vector_3>
      10:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_8>
      24:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 09 	call	0x13ea	; 0x13ea <main>
      8a:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <select_Option>:
 * [Out]           unsigned char
 *
 * [Returns]:     the result of the required choice
 ***************************************************************************************************/
uint8 select_Option (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 *   4-display choice 1 for the user
	 *   5-force arrow of the LCD to go to the third line
	 *   6-display choice 2 for the user
	 */

	LCD_clearScreen();
     b5a:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Select option");
     b5e:	20 e6       	ldi	r18, 0x60	; 96
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	a9 01       	movw	r20, r18
     b68:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
	LCD_displayStringRowColumn(1,0,"1:Change password");
     b74:	2e e6       	ldi	r18, 0x6E	; 110
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	a9 01       	movw	r20, r18
     b7e:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
	LCD_displayStringRowColumn(2,0,"2:Open door");
     b8a:	20 e8       	ldi	r18, 0x80	; 128
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	a9 01       	movw	r20, r18
     b94:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
	do
	{
	/*
	 *Store the value of the pressed key in the local variable "option"
	 */
	option = KeyPad_getPressedKey();
     b98:	0e 94 cf 12 	call	0x259e	; 0x259e <KeyPad_getPressedKey>
     b9c:	8f 87       	std	Y+15, r24	; 0x0f

    /*
     * put the program in pooling to wait user
     * until entering the choice 1 or choice 2
     */
	}while ( (option != CHOICE_1) && (option != CHOICE_2) );
     b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	19 f0       	breq	.+6      	; 0xbaa <select_Option+0x64>
     ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	b9 f7       	brne	.-18     	; 0xb98 <select_Option+0x52>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	aa e7       	ldi	r26, 0x7A	; 122
     bb0:	b4 e4       	ldi	r27, 0x44	; 68
     bb2:	8b 87       	std	Y+11, r24	; 0x0b
     bb4:	9c 87       	std	Y+12, r25	; 0x0c
     bb6:	ad 87       	std	Y+13, r26	; 0x0d
     bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bba:	6b 85       	ldd	r22, Y+11	; 0x0b
     bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	4a e7       	ldi	r20, 0x7A	; 122
     bc8:	53 e4       	ldi	r21, 0x43	; 67
     bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	8f 83       	std	Y+7, r24	; 0x07
     bd4:	98 87       	std	Y+8, r25	; 0x08
     bd6:	a9 87       	std	Y+9, r26	; 0x09
     bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bda:	6f 81       	ldd	r22, Y+7	; 0x07
     bdc:	78 85       	ldd	r23, Y+8	; 0x08
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	9a 85       	ldd	r25, Y+10	; 0x0a
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e8       	ldi	r20, 0x80	; 128
     be8:	5f e3       	ldi	r21, 0x3F	; 63
     bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bee:	88 23       	and	r24, r24
     bf0:	2c f4       	brge	.+10     	; 0xbfc <select_Option+0xb6>
		__ticks = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9e 83       	std	Y+6, r25	; 0x06
     bf8:	8d 83       	std	Y+5, r24	; 0x05
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <select_Option+0x134>
	else if (__tmp > 65535)
     bfc:	6f 81       	ldd	r22, Y+7	; 0x07
     bfe:	78 85       	ldd	r23, Y+8	; 0x08
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	4f e7       	ldi	r20, 0x7F	; 127
     c0a:	57 e4       	ldi	r21, 0x47	; 71
     c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c10:	18 16       	cp	r1, r24
     c12:	4c f5       	brge	.+82     	; 0xc66 <select_Option+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c14:	6b 85       	ldd	r22, Y+11	; 0x0b
     c16:	7c 85       	ldd	r23, Y+12	; 0x0c
     c18:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e2       	ldi	r20, 0x20	; 32
     c22:	51 e4       	ldi	r21, 0x41	; 65
     c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	9e 83       	std	Y+6, r25	; 0x06
     c3a:	8d 83       	std	Y+5, r24	; 0x05
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <select_Option+0x116>
     c3e:	89 e1       	ldi	r24, 0x19	; 25
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <select_Option+0x104>
     c4e:	9c 83       	std	Y+4, r25	; 0x04
     c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	9e 83       	std	Y+6, r25	; 0x06
     c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f7       	brne	.-38     	; 0xc3e <select_Option+0xf8>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <select_Option+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c66:	6f 81       	ldd	r22, Y+7	; 0x07
     c68:	78 85       	ldd	r23, Y+8	; 0x08
     c6a:	89 85       	ldd	r24, Y+9	; 0x09
     c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	9e 83       	std	Y+6, r25	; 0x06
     c78:	8d 83       	std	Y+5, r24	; 0x05
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <select_Option+0x140>
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * check condition: to make sure that the pressed key
	 * is between the only two options
	 * and another pressed key will be ignored
	 */
	if (option == CHOICE_1)
     c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	19 f4       	brne	.+6      	; 0xc9a <select_Option+0x154>
	{
		option = CHOICE_1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	8f 87       	std	Y+15, r24	; 0x0f
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <select_Option+0x15e>
	}/*End of if condition*/
	else if (option == CHOICE_2)
     c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	11 f4       	brne	.+4      	; 0xca4 <select_Option+0x15e>
	{
		option = CHOICE_2;
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	8f 87       	std	Y+15, r24	; 0x0f
	}/*End of else if condition*/

	/*
	 * return the value of the option stored to the original program
	 */
	return option;
     ca4:	8f 85       	ldd	r24, Y+15	; 0x0f

}/*End of select_Option function*/
     ca6:	2f 96       	adiw	r28, 0x0f	; 15
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <password_checkMismatch>:
 * [Out]           unsigned char
 *
 * [Returns]:     the result of the comparing the two passwords
 ***************************************************************************************************/
uint8 password_checkMismatch(uint8* pass1, uint8* pass2)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <password_checkMismatch+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <password_checkMismatch+0x8>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <password_checkMismatch+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	7e 83       	std	Y+6, r23	; 0x06
     ccc:	6d 83       	std	Y+5, r22	; 0x05
	/*
	 * local variable to use it to check the mismatch
	 * between the two entered password
	 * give it initial value assuming no mismatch happen at first
	 */
	uint8 mismatch=0;
     cce:	19 82       	std	Y+1, r1	; 0x01
	 * for loop to check the matching or not
	 * to pass on the two passwords entered digit by digit
	 * to find the mismatch in any digit
	 */

	for(count=INITIAL_VALUE; count<PASSWORD_WIDTH; count++)
     cd0:	1a 82       	std	Y+2, r1	; 0x02
     cd2:	1b c0       	rjmp	.+54     	; 0xd0a <password_checkMismatch+0x52>
	{
		if( pass1[count] != pass2[count] )
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	fc 01       	movw	r30, r24
     ce0:	e2 0f       	add	r30, r18
     ce2:	f3 1f       	adc	r31, r19
     ce4:	40 81       	ld	r20, Z
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	fc 01       	movw	r30, r24
     cf2:	e2 0f       	add	r30, r18
     cf4:	f3 1f       	adc	r31, r19
     cf6:	80 81       	ld	r24, Z
     cf8:	48 17       	cp	r20, r24
     cfa:	21 f0       	breq	.+8      	; 0xd04 <password_checkMismatch+0x4c>
		{
			/*
			 * change the value of the mismatch if any two digits
			 * are not equal
			 */
			mismatch = MISMATCH_OCCUR;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01
			/*
			 * change the value of the counter to another value
			 * value larger than the no of iteration to exit from the loop
			 * there is no need to complete the loop after finding difference in one digit
			 */
			count= PASSWORD_WIDTH;
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	8a 83       	std	Y+2, r24	; 0x02
	 * for loop to check the matching or not
	 * to pass on the two passwords entered digit by digit
	 * to find the mismatch in any digit
	 */

	for(count=INITIAL_VALUE; count<PASSWORD_WIDTH; count++)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	8a 83       	std	Y+2, r24	; 0x02
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	85 30       	cpi	r24, 0x05	; 5
     d0e:	10 f3       	brcs	.-60     	; 0xcd4 <password_checkMismatch+0x1c>
	}/*End of for loop of mismatching*/

	/*
	 * return the final value of the mismatch variable to the original application
	 */
	return mismatch;
     d10:	89 81       	ldd	r24, Y+1	; 0x01

}/*End of check_Mismatch function*/
     d12:	26 96       	adiw	r28, 0x06	; 6
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <store_Password>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void store_Password(uint8 *pass)
{
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	61 97       	sbiw	r28, 0x11	; 17
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	99 8b       	std	Y+17, r25	; 0x11
     d3e:	88 8b       	std	Y+16, r24	; 0x10
	 *   1-call the function of call screen to clear the LCD screen
	 *   2-display a message for the user to "please enter a"
	 *   3-force arrow of the LCD to go to the second line
	 *   4-display a message for the user "password then Enter ="
	 */
	LCD_clearScreen();
     d40:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Password,");
     d44:	2c e8       	ldi	r18, 0x8C	; 140
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	a9 01       	movw	r20, r18
     d4e:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
	LCD_displayStringRowColumn(1,0,"please then Enter\"=\"");
     d5a:	2c e9       	ldi	r18, 0x9C	; 156
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	a9 01       	movw	r20, r18
     d64:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>


	for(count= INITIAL_VALUE ; count< PASSWORD_WIDTH; count++)
     d68:	1f 86       	std	Y+15, r1	; 0x0f
     d6a:	b0 c0       	rjmp	.+352    	; 0xecc <store_Password+0x1a8>
	{
		/*
		 * force the cursor to begin from the third line
		 */
		LCD_goToRowColumn(2,count);
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	6f 85       	ldd	r22, Y+15	; 0x0f
     d70:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		/*store the password of the user element by element in array*/
		pass[count] = KeyPad_getPressedKey();
     d74:	8f 85       	ldd	r24, Y+15	; 0x0f
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	88 89       	ldd	r24, Y+16	; 0x10
     d7c:	99 89       	ldd	r25, Y+17	; 0x11
     d7e:	8c 01       	movw	r16, r24
     d80:	02 0f       	add	r16, r18
     d82:	13 1f       	adc	r17, r19
     d84:	0e 94 cf 12 	call	0x259e	; 0x259e <KeyPad_getPressedKey>
     d88:	f8 01       	movw	r30, r16
     d8a:	80 83       	st	Z, r24
		/*
		 * condition to detect if the pressed key in keypad
		 * is number or character to display the in right way on the screen
		 * display it for 3seconds only then overwrite '*' on it to keep privacy
		 */
		if ((pass[count]>= 0) && (pass[count]<= 9))
     d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	88 89       	ldd	r24, Y+16	; 0x10
     d94:	99 89       	ldd	r25, Y+17	; 0x11
     d96:	fc 01       	movw	r30, r24
     d98:	e2 0f       	add	r30, r18
     d9a:	f3 1f       	adc	r31, r19
     d9c:	80 81       	ld	r24, Z
     d9e:	8a 30       	cpi	r24, 0x0A	; 10
     da0:	70 f4       	brcc	.+28     	; 0xdbe <store_Password+0x9a>
		{
			LCD_intgerToString(pass[count]);
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	88 89       	ldd	r24, Y+16	; 0x10
     daa:	99 89       	ldd	r25, Y+17	; 0x11
     dac:	fc 01       	movw	r30, r24
     dae:	e2 0f       	add	r30, r18
     db0:	f3 1f       	adc	r31, r19
     db2:	80 81       	ld	r24, Z
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 64 18 	call	0x30c8	; 0x30c8 <LCD_intgerToString>
     dbc:	0b c0       	rjmp	.+22     	; 0xdd4 <store_Password+0xb0>
		}
		else
		{
			LCD_displayCharacter(pass[count]);
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	88 89       	ldd	r24, Y+16	; 0x10
     dc6:	99 89       	ldd	r25, Y+17	; 0x11
     dc8:	fc 01       	movw	r30, r24
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	80 81       	ld	r24, Z
     dd0:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_displayCharacter>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	aa ef       	ldi	r26, 0xFA	; 250
     dda:	b4 e4       	ldi	r27, 0x44	; 68
     ddc:	8b 87       	std	Y+11, r24	; 0x0b
     dde:	9c 87       	std	Y+12, r25	; 0x0c
     de0:	ad 87       	std	Y+13, r26	; 0x0d
     de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de4:	6b 85       	ldd	r22, Y+11	; 0x0b
     de6:	7c 85       	ldd	r23, Y+12	; 0x0c
     de8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dea:	9e 85       	ldd	r25, Y+14	; 0x0e
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	4a e7       	ldi	r20, 0x7A	; 122
     df2:	53 e4       	ldi	r21, 0x43	; 67
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	8f 83       	std	Y+7, r24	; 0x07
     dfe:	98 87       	std	Y+8, r25	; 0x08
     e00:	a9 87       	std	Y+9, r26	; 0x09
     e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e8       	ldi	r20, 0x80	; 128
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e18:	88 23       	and	r24, r24
     e1a:	2c f4       	brge	.+10     	; 0xe26 <store_Password+0x102>
		__ticks = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	3f c0       	rjmp	.+126    	; 0xea4 <store_Password+0x180>
	else if (__tmp > 65535)
     e26:	6f 81       	ldd	r22, Y+7	; 0x07
     e28:	78 85       	ldd	r23, Y+8	; 0x08
     e2a:	89 85       	ldd	r24, Y+9	; 0x09
     e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	3f ef       	ldi	r19, 0xFF	; 255
     e32:	4f e7       	ldi	r20, 0x7F	; 127
     e34:	57 e4       	ldi	r21, 0x47	; 71
     e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	4c f5       	brge	.+82     	; 0xe90 <store_Password+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <store_Password+0x162>
     e68:	89 e1       	ldi	r24, 0x19	; 25
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <store_Password+0x150>
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f7       	brne	.-38     	; 0xe68 <store_Password+0x144>
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <store_Password+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9e 83       	std	Y+6, r25	; 0x06
     ea2:	8d 83       	std	Y+5, r24	; 0x05
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <store_Password+0x18c>
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01

		/*
		 * force the cursor to return to the same position and
		 * overwrite '*' on the number to keep privacy
		 */
		LCD_goToRowColumn(2,count);
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	6f 85       	ldd	r22, Y+15	; 0x0f
     ebc:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		LCD_displayCharacter('*');
     ec0:	8a e2       	ldi	r24, 0x2A	; 42
     ec2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_displayCharacter>
	LCD_displayStringRowColumn(0,0,"Enter Password,");
	LCD_goToRowColumn(1,0);
	LCD_displayStringRowColumn(1,0,"please then Enter\"=\"");


	for(count= INITIAL_VALUE ; count< PASSWORD_WIDTH; count++)
     ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	8f 87       	std	Y+15, r24	; 0x0f
     ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <store_Password+0x1b0>
     ed2:	4c cf       	rjmp	.-360    	; 0xd6c <store_Password+0x48>
	} /*End of the for loop*/
	/*
	 * wait until user submit the password by pressing '='
	 */

	while( ( KeyPad_getPressedKey() )!= '='){}
     ed4:	0e 94 cf 12 	call	0x259e	; 0x259e <KeyPad_getPressedKey>
     ed8:	8d 33       	cpi	r24, 0x3D	; 61
     eda:	e1 f7       	brne	.-8      	; 0xed4 <store_Password+0x1b0>

	/*
	 *clear the screen after finishing the required task
	 */
	LCD_clearScreen();
     edc:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>

} /*End of store_Password function*/
     ee0:	61 96       	adiw	r28, 0x11	; 17
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <start_System>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void start_System(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	6c 97       	sbiw	r28, 0x1c	; 28
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
	 * First message to the user
	 * appear in the first line in the LCD
	 * force the cursor to begin from the second line
	 * keep the message on the LCD for 5 seconds
	 */
	LCD_displayStringRowColumn(0,0,"First time to login");
     f0a:	21 eb       	ldi	r18, 0xB1	; 177
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	a9 01       	movw	r20, r18
     f14:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
	LCD_displayStringRowColumn(1,0,"Hello Admin");
     f20:	25 ec       	ldi	r18, 0xC5	; 197
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	a9 01       	movw	r20, r18
     f2a:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	aa e7       	ldi	r26, 0x7A	; 122
     f34:	b5 e4       	ldi	r27, 0x45	; 69
     f36:	89 8f       	std	Y+25, r24	; 0x19
     f38:	9a 8f       	std	Y+26, r25	; 0x1a
     f3a:	ab 8f       	std	Y+27, r26	; 0x1b
     f3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	69 8d       	ldd	r22, Y+25	; 0x19
     f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a e7       	ldi	r20, 0x7A	; 122
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	8d 8b       	std	Y+21, r24	; 0x15
     f58:	9e 8b       	std	Y+22, r25	; 0x16
     f5a:	af 8b       	std	Y+23, r26	; 0x17
     f5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f5e:	6d 89       	ldd	r22, Y+21	; 0x15
     f60:	7e 89       	ldd	r23, Y+22	; 0x16
     f62:	8f 89       	ldd	r24, Y+23	; 0x17
     f64:	98 8d       	ldd	r25, Y+24	; 0x18
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	2c f4       	brge	.+10     	; 0xf80 <start_System+0x8a>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <start_System+0x108>
	else if (__tmp > 65535)
     f80:	6d 89       	ldd	r22, Y+21	; 0x15
     f82:	7e 89       	ldd	r23, Y+22	; 0x16
     f84:	8f 89       	ldd	r24, Y+23	; 0x17
     f86:	98 8d       	ldd	r25, Y+24	; 0x18
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	4f e7       	ldi	r20, 0x7F	; 127
     f8e:	57 e4       	ldi	r21, 0x47	; 71
     f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f94:	18 16       	cp	r1, r24
     f96:	4c f5       	brge	.+82     	; 0xfea <start_System+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9c 8b       	std	Y+20, r25	; 0x14
     fbe:	8b 8b       	std	Y+19, r24	; 0x13
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <start_System+0xea>
     fc2:	89 e1       	ldi	r24, 0x19	; 25
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9a 8b       	std	Y+18, r25	; 0x12
     fc8:	89 8b       	std	Y+17, r24	; 0x11
     fca:	89 89       	ldd	r24, Y+17	; 0x11
     fcc:	9a 89       	ldd	r25, Y+18	; 0x12
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <start_System+0xd8>
     fd2:	9a 8b       	std	Y+18, r25	; 0x12
     fd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	8b 89       	ldd	r24, Y+19	; 0x13
     fd8:	9c 89       	ldd	r25, Y+20	; 0x14
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	9c 8b       	std	Y+20, r25	; 0x14
     fde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	8b 89       	ldd	r24, Y+19	; 0x13
     fe2:	9c 89       	ldd	r25, Y+20	; 0x14
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f7       	brne	.-38     	; 0xfc2 <start_System+0xcc>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <start_System+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	98 8b       	std	Y+16, r25	; 0x10
    1004:	8f 87       	std	Y+15, r24	; 0x0f
    1006:	8f 85       	ldd	r24, Y+15	; 0x0f
    1008:	98 89       	ldd	r25, Y+16	; 0x10
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <start_System+0x114>
    100e:	98 8b       	std	Y+16, r25	; 0x10
    1010:	8f 87       	std	Y+15, r24	; 0x0f
	/*
	 * get the password from the user
	 * store it in the array g_password1
	 */

	store_Password(g_password1);
    1012:	8b ec       	ldi	r24, 0xCB	; 203
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	0e 94 92 06 	call	0xd24	; 0xd24 <store_Password>
	/*
	 *   1-display a message for the user to "Submit password"
	 *   2-force arrow of the LCD to go to the second line
	 *   3-display a message for the user "Enter pass again"
	 */
	LCD_displayStringRowColumn(0,0,"Submit password");
    101a:	21 ed       	ldi	r18, 0xD1	; 209
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
	LCD_displayStringRowColumn(1,0,"Enter PASS. again.");
    1030:	21 ee       	ldi	r18, 0xE1	; 225
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	aa e7       	ldi	r26, 0x7A	; 122
    1044:	b5 e4       	ldi	r27, 0x45	; 69
    1046:	8b 87       	std	Y+11, r24	; 0x0b
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	ad 87       	std	Y+13, r26	; 0x0d
    104c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1050:	7c 85       	ldd	r23, Y+12	; 0x0c
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a e7       	ldi	r20, 0x7A	; 122
    105c:	53 e4       	ldi	r21, 0x43	; 67
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	8f 83       	std	Y+7, r24	; 0x07
    1068:	98 87       	std	Y+8, r25	; 0x08
    106a:	a9 87       	std	Y+9, r26	; 0x09
    106c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	2c f4       	brge	.+10     	; 0x1090 <start_System+0x19a>
		__ticks = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	3f c0       	rjmp	.+126    	; 0x110e <start_System+0x218>
	else if (__tmp > 65535)
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	4f e7       	ldi	r20, 0x7F	; 127
    109e:	57 e4       	ldi	r21, 0x47	; 71
    10a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a4:	18 16       	cp	r1, r24
    10a6:	4c f5       	brge	.+82     	; 0x10fa <start_System+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <start_System+0x1fa>
    10d2:	89 e1       	ldi	r24, 0x19	; 25
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <start_System+0x1e8>
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <start_System+0x1dc>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <start_System+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <start_System+0x224>
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * keep the  message on LCD for 4 seconds
	 * then clear the screen
	 */
	_delay_ms(4000);
	LCD_clearScreen();
    1122:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>

	/*
	 * get the password from the user again
	 * and then store it in another array g_password2
	 */
	store_Password(g_password2);
    1126:	80 ed       	ldi	r24, 0xD0	; 208
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 92 06 	call	0xd24	; 0xd24 <store_Password>

}/*End of start_System function*/
    112e:	6c 96       	adiw	r28, 0x1c	; 28
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <timerMoving_Anti_Clockwise>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void timerMoving_Anti_Clockwise(void)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	2e 97       	sbiw	r28, 0x0e	; 14
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
	/*
	 * increment the value of the global variable
	 * every increase of it means that an interrupt of the occurs
	 * every increase of it mans 1 second has passed
	 */
	g_tickFlag++;
    1154:	80 91 c4 01 	lds	r24, 0x01C4
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 c4 01 	sts	0x01C4, r24

	/*
	 * As long as g_tickFlag smaller than the value of maximum seconds
	 * the LCD is remaining to display the same message
	 */
	if( g_tickFlag < MAXIMUM_SECONDS_ANTI_CLOCKWISE)
    115e:	80 91 c4 01 	lds	r24, 0x01C4
    1162:	8f 30       	cpi	r24, 0x0F	; 15
    1164:	98 f4       	brcc	.+38     	; 0x118c <timerMoving_Anti_Clockwise+0x4c>
		/*
		 *   1-display a message for the user to "Door is .."
		 *   2-force arrow of the LCD to go to the second line
		 *   3-display a message for the user "Closing now!"
		 */
		LCD_displayStringRowColumn(0,0,"Door is..");
    1166:	24 ef       	ldi	r18, 0xF4	; 244
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		LCD_displayStringRowColumn(1,0,"Closing now!");
    117c:	2e ef       	ldi	r18, 0xFE	; 254
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    118a:	96 c0       	rjmp	.+300    	; 0x12b8 <timerMoving_Anti_Clockwise+0x178>

	/*
	 * As long as g_tickFlag reaches the maximum value of seconds
	 * so the LCD will stop displaying the message
	 */
	else if(g_tickFlag == MAXIMUM_SECONDS_ANTI_CLOCKWISE)
    118c:	80 91 c4 01 	lds	r24, 0x01C4
    1190:	8f 30       	cpi	r24, 0x0F	; 15
    1192:	09 f0       	breq	.+2      	; 0x1196 <timerMoving_Anti_Clockwise+0x56>
    1194:	91 c0       	rjmp	.+290    	; 0x12b8 <timerMoving_Anti_Clockwise+0x178>
	{
		/*
		 * clear the LCD screen to stop displaying
		 * the message for closing the door
		 */
		LCD_clearScreen();
    1196:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
		 *   1-display a message for the user to "Door is .."
		 *   2-force arrow of the LCD to go to the second line
		 *   3-display a message for the user "Closed now!"
		 *   4-clear LCD Screen to be ready for any new message
		 */
		LCD_displayStringRowColumn(0,0,"Door is..");
    119a:	24 ef       	ldi	r18, 0xF4	; 244
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		LCD_displayStringRowColumn(1,0,"Closed now!");
    11b0:	2b e0       	ldi	r18, 0x0B	; 11
    11b2:	31 e0       	ldi	r19, 0x01	; 1
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	aa e7       	ldi	r26, 0x7A	; 122
    11c4:	b5 e4       	ldi	r27, 0x45	; 69
    11c6:	8b 87       	std	Y+11, r24	; 0x0b
    11c8:	9c 87       	std	Y+12, r25	; 0x0c
    11ca:	ad 87       	std	Y+13, r26	; 0x0d
    11cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a e7       	ldi	r20, 0x7A	; 122
    11dc:	53 e4       	ldi	r21, 0x43	; 67
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	8f 83       	std	Y+7, r24	; 0x07
    11e8:	98 87       	std	Y+8, r25	; 0x08
    11ea:	a9 87       	std	Y+9, r26	; 0x09
    11ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ee:	6f 81       	ldd	r22, Y+7	; 0x07
    11f0:	78 85       	ldd	r23, Y+8	; 0x08
    11f2:	89 85       	ldd	r24, Y+9	; 0x09
    11f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1202:	88 23       	and	r24, r24
    1204:	2c f4       	brge	.+10     	; 0x1210 <timerMoving_Anti_Clockwise+0xd0>
		__ticks = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	3f c0       	rjmp	.+126    	; 0x128e <timerMoving_Anti_Clockwise+0x14e>
	else if (__tmp > 65535)
    1210:	6f 81       	ldd	r22, Y+7	; 0x07
    1212:	78 85       	ldd	r23, Y+8	; 0x08
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	4f e7       	ldi	r20, 0x7F	; 127
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1224:	18 16       	cp	r1, r24
    1226:	4c f5       	brge	.+82     	; 0x127a <timerMoving_Anti_Clockwise+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1228:	6b 85       	ldd	r22, Y+11	; 0x0b
    122a:	7c 85       	ldd	r23, Y+12	; 0x0c
    122c:	8d 85       	ldd	r24, Y+13	; 0x0d
    122e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	8d 83       	std	Y+5, r24	; 0x05
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <timerMoving_Anti_Clockwise+0x130>
    1252:	89 e1       	ldi	r24, 0x19	; 25
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <timerMoving_Anti_Clockwise+0x11e>
    1262:	9c 83       	std	Y+4, r25	; 0x04
    1264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	9e 83       	std	Y+6, r25	; 0x06
    126e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	69 f7       	brne	.-38     	; 0x1252 <timerMoving_Anti_Clockwise+0x112>
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <timerMoving_Anti_Clockwise+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127a:	6f 81       	ldd	r22, Y+7	; 0x07
    127c:	78 85       	ldd	r23, Y+8	; 0x08
    127e:	89 85       	ldd	r24, Y+9	; 0x09
    1280:	9a 85       	ldd	r25, Y+10	; 0x0a
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <timerMoving_Anti_Clockwise+0x15a>
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
		LCD_clearScreen();
    12a2:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>

		/*
		 *DE-initialization of all the register of the timer
		 *to be ready for another interrupts occur
		 */
		Timer_DeInit(Timer1);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	0e 94 bf 1c 	call	0x397e	; 0x397e <Timer_DeInit>

		/*
		 * return the initial value of the global flag
		 * to be ready for another interrupt occur
		 */
		g_tickFlag= 0;
    12ac:	10 92 c4 01 	sts	0x01C4, r1
		/*
		 * change the value of g_holdSystem variable to
		 * log out from the polling on the time interrupt
		 * and return to the remain parts of the application
		 */
		g_holdSystem = RESUME_SYSTEM;
    12b0:	10 92 b4 01 	sts	0x01B4, r1

		/*
		 * clear LCD screen after displaying the last message
		 * "Door is closing now"
		 */
		LCD_clearScreen();
    12b4:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
	}/*End of else if condition*/

}/*End of timerMoving_Anti_Clockwise function*/
    12b8:	2e 96       	adiw	r28, 0x0e	; 14
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <timerStopping>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void timerStopping(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * increment the value of the global variable
	 * every increase of it means that an interrupt of the occurs
	 * every increase of it mans 1 second has passed
	 */
	g_tickFlag++;
    12d2:	80 91 c4 01 	lds	r24, 0x01C4
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 c4 01 	sts	0x01C4, r24

	/*
	 * As long as g_tickFlag smaller than the value of maximum seconds
	 * the LCD is remaining to display the same message
	 */
	if( g_tickFlag < MAXIMUM_SECONDS_STOPPING)
    12dc:	80 91 c4 01 	lds	r24, 0x01C4
    12e0:	85 30       	cpi	r24, 0x05	; 5
    12e2:	98 f4       	brcc	.+38     	; 0x130a <timerStopping+0x40>
	{
		LCD_displayStringRowColumn(0,0,"Door is..");
    12e4:	24 ef       	ldi	r18, 0xF4	; 244
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		LCD_displayStringRowColumn(1,0,"Open now!");
    12fa:	27 e1       	ldi	r18, 0x17	; 23
    12fc:	31 e0       	ldi	r19, 0x01	; 1
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <timerStopping+0x5a>
	}/*end of if condition*/
	/*
	 * As long as g_tickFlag reaches the maximum value of seconds
	 * so the LCD will stop displaying the message
	 */
	else if(g_tickFlag == MAXIMUM_SECONDS_STOPPING)
    130a:	80 91 c4 01 	lds	r24, 0x01C4
    130e:	85 30       	cpi	r24, 0x05	; 5
    1310:	49 f4       	brne	.+18     	; 0x1324 <timerStopping+0x5a>
	{
		/*
		 * return the initial value of the global flag
		 * to be ready for another interrupt occur
		 */
		g_tickFlag=0;
    1312:	10 92 c4 01 	sts	0x01C4, r1
		 * change the address of the function that the timer's ISR
		 * will call after every interrupt to be the address of
		 * the timerMoving_Anti_Clockwise function to make the
		 * door moving on anti clock wise direction after stopping
		 */
		Timer_setCallBack(timerMoving_Anti_Clockwise, Timer1);
    1316:	80 ea       	ldi	r24, 0xA0	; 160
    1318:	98 e0       	ldi	r25, 0x08	; 8
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	0e 94 4f 1c 	call	0x389e	; 0x389e <Timer_setCallBack>

		/*
		 * clear LCD screen after displaying the last message
		 * "Door is closing now"
		 */
		LCD_clearScreen();
    1320:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
	}/*End of else if condition*/

}/*End of timerStopping function*/
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <timerMoving_Clockwise>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void timerMoving_Clockwise(void)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62

	/*
	 * to keep the system into polling to prevent it from doing
	 *  any thing until the operation of open door ends
	 */
	g_tickFlag++;
    1332:	80 91 c4 01 	lds	r24, 0x01C4
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 c4 01 	sts	0x01C4, r24

	/*
	 * As long as g_tickFlag smaller than the value of maximum seconds
	 * the LCD is remaining to display the same message
	 */
	if( g_tickFlag < MAXIMUM_SECONDS_CLOCKWISE)
    133c:	80 91 c4 01 	lds	r24, 0x01C4
    1340:	8f 30       	cpi	r24, 0x0F	; 15
    1342:	98 f4       	brcc	.+38     	; 0x136a <timerMoving_Clockwise+0x40>
		 *   1-display a message for the user to "Door is .."
		 *   2-force arrow of the LCD to go to the second line
		 *   3-display a message for the user "Opening now!"
		 */

		LCD_displayStringRowColumn(0,0,"Door is..");
    1344:	24 ef       	ldi	r18, 0xF4	; 244
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		LCD_displayStringRowColumn(1,0,"Opening!");
    135a:	21 e2       	ldi	r18, 0x21	; 33
    135c:	31 e0       	ldi	r19, 0x01	; 1
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	a9 01       	movw	r20, r18
    1364:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <timerMoving_Clockwise+0x5a>
	}/*End of if condition*/
	/*
	 * As long as g_tickFlag reaches the maximum value of seconds
	 * so the LCD will stop displaying the message
	 */
	else if(g_tickFlag == MAXIMUM_SECONDS_CLOCKWISE)
    136a:	80 91 c4 01 	lds	r24, 0x01C4
    136e:	8f 30       	cpi	r24, 0x0F	; 15
    1370:	49 f4       	brne	.+18     	; 0x1384 <timerMoving_Clockwise+0x5a>

		/*
		 * return the initial value of the global flag
		 * to be ready for another interrupt occur
		 */
		g_tickFlag=0;
    1372:	10 92 c4 01 	sts	0x01C4, r1
		 * change the address of the function that the timer's ISR
		 * will call after every interrupt to be the address of
		 * the timerMoving_Anti_Clockwise function to make the
		 * door moving on anti clock wise direction after stopping
		 */
		Timer_setCallBack(timerStopping, Timer1);
    1376:	85 e6       	ldi	r24, 0x65	; 101
    1378:	99 e0       	ldi	r25, 0x09	; 9
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	0e 94 4f 1c 	call	0x389e	; 0x389e <Timer_setCallBack>
		/*
		 * clear LCD screen after displaying the last message
		 * "Door is opening now"
		 */
		LCD_clearScreen();
    1380:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>

	}/*End of else if condition*/

}/*end of timerMoving_Clockwise function*/
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <timerDanger>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 *****************************************************************************************************/
void timerDanger(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	/*
	 * to keep the system into polling to prevent it from doing
	 *  any thing until the operation of open door ends
	 */
	g_tickFlag++;
    1392:	80 91 c4 01 	lds	r24, 0x01C4
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 93 c4 01 	sts	0x01C4, r24
	/*
	 * As long as g_tickFlag smaller than the value of maximum seconds
	 * the LCD is remaining to display the same message
	 */

	if( g_tickFlag < MAXIMUM_SECONDS_BUZZER)
    139c:	80 91 c4 01 	lds	r24, 0x01C4
    13a0:	8f 30       	cpi	r24, 0x0F	; 15
    13a2:	98 f4       	brcc	.+38     	; 0x13ca <timerDanger+0x40>
		/*
		 *   1-display a message for the user to "Exhaustion attempts"
		 *   2-force arrow of the LCD to go to the second line
		 *   3-display a message for the user "      THIEF!!     "
		 */
		LCD_displayStringRowColumn(0,0,"Exhaustion attempts");
    13a4:	2a e2       	ldi	r18, 0x2A	; 42
    13a6:	31 e0       	ldi	r19, 0x01	; 1
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
		LCD_displayStringRowColumn(1,0,"      THIEF!!     ");
    13ba:	2e e3       	ldi	r18, 0x3E	; 62
    13bc:	31 e0       	ldi	r19, 0x01	; 1
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <timerDanger+0x5a>
	}
	/*
	 * As long as g_tickFlag reaches the maximum value of seconds
	 * so the LCD will stop displaying the message
	 */
	else if(g_tickFlag == MAXIMUM_SECONDS_BUZZER )
    13ca:	80 91 c4 01 	lds	r24, 0x01C4
    13ce:	8f 30       	cpi	r24, 0x0F	; 15
    13d0:	49 f4       	brne	.+18     	; 0x13e4 <timerDanger+0x5a>
	{
		/*
		 * change the mode of the timer to return to the
		 * initial state for all registers
		 */
		Timer_DeInit(Timer1);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	0e 94 bf 1c 	call	0x397e	; 0x397e <Timer_DeInit>
		/*
		 * return the initial value of the global flag
		 * to be ready for another interrupt occur
		 */
		g_tickFlag=0;
    13d8:	10 92 c4 01 	sts	0x01C4, r1
		/*
		 * change the value of g_holdSystem variable to
		 * log out from the polling on the time interrupt
		 * and return to the remain parts of the application
		 */
		g_holdSystem= RESUME_SYSTEM;
    13dc:	10 92 b4 01 	sts	0x01B4, r1
		/*
		 * clear LCD screen after displaying the last message
		 * "Exhaustion attempts, THIEF!!"
		 */
		LCD_clearScreen();
    13e0:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>

	}/*end of else if condition*/

}/*End of timeDanger Function*/
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <main>:
/******************************************************************************************
 *                                   START OF THE PROGRAM
 *****************************************************************************************/

int main(void)
{
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	cb 5a       	subi	r28, 0xAB	; 171
    13f8:	d0 40       	sbci	r29, 0x00	; 0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
	/*
	 * local variable to use it to increment the numbers of
	 * tries to enter the password wrong not equal to stored password
	 * give it initial value by 0 assuming no error in entered password as first
	 */
	uint8 danger_error = NO_DANGER;
    1404:	fe 01       	movw	r30, r28
    1406:	e2 57       	subi	r30, 0x72	; 114
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	10 82       	st	Z, r1
	/*
	 * local variable to use it to force the program to begin from the first
	 *  super loop if the password entered wrong for 3 times to
	 *  to prevent the program return from the same sequence after thief event occur
	 */
	uint8 restart_mainProgram = FALSE;
    140c:	fe 01       	movw	r30, r28
    140e:	e3 57       	subi	r30, 0x73	; 115
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	10 82       	st	Z, r1

	/*
	 * initialize the configure structure of the timer
	 * choosing value in order to form the structure
	 */
	Timer_ConfigType timer={START_VALUE, COMPARE_VALUE, Timer1, F_CPU_1024, Compare};
    1414:	ce 01       	movw	r24, r28
    1416:	8c 56       	subi	r24, 0x6C	; 108
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	ce 55       	subi	r28, 0x5E	; 94
    141c:	df 4f       	sbci	r29, 0xFF	; 255
    141e:	99 83       	std	Y+1, r25	; 0x01
    1420:	88 83       	st	Y, r24
    1422:	c2 5a       	subi	r28, 0xA2	; 162
    1424:	d0 40       	sbci	r29, 0x00	; 0
    1426:	88 eb       	ldi	r24, 0xB8	; 184
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	cc 55       	subi	r28, 0x5C	; 92
    142c:	df 4f       	sbci	r29, 0xFF	; 255
    142e:	99 83       	std	Y+1, r25	; 0x01
    1430:	88 83       	st	Y, r24
    1432:	c4 5a       	subi	r28, 0xA4	; 164
    1434:	d0 40       	sbci	r29, 0x00	; 0
    1436:	9b e0       	ldi	r25, 0x0B	; 11
    1438:	ca 55       	subi	r28, 0x5A	; 90
    143a:	df 4f       	sbci	r29, 0xFF	; 255
    143c:	98 83       	st	Y, r25
    143e:	c6 5a       	subi	r28, 0xA6	; 166
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	cc 55       	subi	r28, 0x5C	; 92
    1444:	df 4f       	sbci	r29, 0xFF	; 255
    1446:	e8 81       	ld	r30, Y
    1448:	f9 81       	ldd	r31, Y+1	; 0x01
    144a:	c4 5a       	subi	r28, 0xA4	; 164
    144c:	d0 40       	sbci	r29, 0x00	; 0
    144e:	00 80       	ld	r0, Z
    1450:	cc 55       	subi	r28, 0x5C	; 92
    1452:	df 4f       	sbci	r29, 0xFF	; 255
    1454:	88 81       	ld	r24, Y
    1456:	99 81       	ldd	r25, Y+1	; 0x01
    1458:	c4 5a       	subi	r28, 0xA4	; 164
    145a:	d0 40       	sbci	r29, 0x00	; 0
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	cc 55       	subi	r28, 0x5C	; 92
    1460:	df 4f       	sbci	r29, 0xFF	; 255
    1462:	99 83       	std	Y+1, r25	; 0x01
    1464:	88 83       	st	Y, r24
    1466:	c4 5a       	subi	r28, 0xA4	; 164
    1468:	d0 40       	sbci	r29, 0x00	; 0
    146a:	ce 55       	subi	r28, 0x5E	; 94
    146c:	df 4f       	sbci	r29, 0xFF	; 255
    146e:	e8 81       	ld	r30, Y
    1470:	f9 81       	ldd	r31, Y+1	; 0x01
    1472:	c2 5a       	subi	r28, 0xA2	; 162
    1474:	d0 40       	sbci	r29, 0x00	; 0
    1476:	00 82       	st	Z, r0
    1478:	ce 55       	subi	r28, 0x5E	; 94
    147a:	df 4f       	sbci	r29, 0xFF	; 255
    147c:	88 81       	ld	r24, Y
    147e:	99 81       	ldd	r25, Y+1	; 0x01
    1480:	c2 5a       	subi	r28, 0xA2	; 162
    1482:	d0 40       	sbci	r29, 0x00	; 0
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	ce 55       	subi	r28, 0x5E	; 94
    1488:	df 4f       	sbci	r29, 0xFF	; 255
    148a:	99 83       	std	Y+1, r25	; 0x01
    148c:	88 83       	st	Y, r24
    148e:	c2 5a       	subi	r28, 0xA2	; 162
    1490:	d0 40       	sbci	r29, 0x00	; 0
    1492:	ca 55       	subi	r28, 0x5A	; 90
    1494:	df 4f       	sbci	r29, 0xFF	; 255
    1496:	98 81       	ld	r25, Y
    1498:	c6 5a       	subi	r28, 0xA6	; 166
    149a:	d0 40       	sbci	r29, 0x00	; 0
    149c:	91 50       	subi	r25, 0x01	; 1
    149e:	ca 55       	subi	r28, 0x5A	; 90
    14a0:	df 4f       	sbci	r29, 0xFF	; 255
    14a2:	98 83       	st	Y, r25
    14a4:	c6 5a       	subi	r28, 0xA6	; 166
    14a6:	d0 40       	sbci	r29, 0x00	; 0
    14a8:	ca 55       	subi	r28, 0x5A	; 90
    14aa:	df 4f       	sbci	r29, 0xFF	; 255
    14ac:	e8 81       	ld	r30, Y
    14ae:	c6 5a       	subi	r28, 0xA6	; 166
    14b0:	d0 40       	sbci	r29, 0x00	; 0
    14b2:	ee 23       	and	r30, r30
    14b4:	31 f6       	brne	.-116    	; 0x1442 <main+0x58>

	/*
	 * initialize the configure structure of UART
	 * choosing value in order to form the structure
	 */
	UART_config uart = {BIT_8, DISABLE, STOP_BIT_1};
    14b6:	ce 01       	movw	r24, r28
    14b8:	81 56       	subi	r24, 0x61	; 97
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	c9 55       	subi	r28, 0x59	; 89
    14be:	df 4f       	sbci	r29, 0xFF	; 255
    14c0:	99 83       	std	Y+1, r25	; 0x01
    14c2:	88 83       	st	Y, r24
    14c4:	c7 5a       	subi	r28, 0xA7	; 167
    14c6:	d0 40       	sbci	r29, 0x00	; 0
    14c8:	85 eb       	ldi	r24, 0xB5	; 181
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	c7 55       	subi	r28, 0x57	; 87
    14ce:	df 4f       	sbci	r29, 0xFF	; 255
    14d0:	99 83       	std	Y+1, r25	; 0x01
    14d2:	88 83       	st	Y, r24
    14d4:	c9 5a       	subi	r28, 0xA9	; 169
    14d6:	d0 40       	sbci	r29, 0x00	; 0
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	c5 55       	subi	r28, 0x55	; 85
    14dc:	df 4f       	sbci	r29, 0xFF	; 255
    14de:	98 83       	st	Y, r25
    14e0:	cb 5a       	subi	r28, 0xAB	; 171
    14e2:	d0 40       	sbci	r29, 0x00	; 0
    14e4:	c7 55       	subi	r28, 0x57	; 87
    14e6:	df 4f       	sbci	r29, 0xFF	; 255
    14e8:	e8 81       	ld	r30, Y
    14ea:	f9 81       	ldd	r31, Y+1	; 0x01
    14ec:	c9 5a       	subi	r28, 0xA9	; 169
    14ee:	d0 40       	sbci	r29, 0x00	; 0
    14f0:	00 80       	ld	r0, Z
    14f2:	c7 55       	subi	r28, 0x57	; 87
    14f4:	df 4f       	sbci	r29, 0xFF	; 255
    14f6:	88 81       	ld	r24, Y
    14f8:	99 81       	ldd	r25, Y+1	; 0x01
    14fa:	c9 5a       	subi	r28, 0xA9	; 169
    14fc:	d0 40       	sbci	r29, 0x00	; 0
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	c7 55       	subi	r28, 0x57	; 87
    1502:	df 4f       	sbci	r29, 0xFF	; 255
    1504:	99 83       	std	Y+1, r25	; 0x01
    1506:	88 83       	st	Y, r24
    1508:	c9 5a       	subi	r28, 0xA9	; 169
    150a:	d0 40       	sbci	r29, 0x00	; 0
    150c:	c9 55       	subi	r28, 0x59	; 89
    150e:	df 4f       	sbci	r29, 0xFF	; 255
    1510:	e8 81       	ld	r30, Y
    1512:	f9 81       	ldd	r31, Y+1	; 0x01
    1514:	c7 5a       	subi	r28, 0xA7	; 167
    1516:	d0 40       	sbci	r29, 0x00	; 0
    1518:	00 82       	st	Z, r0
    151a:	c9 55       	subi	r28, 0x59	; 89
    151c:	df 4f       	sbci	r29, 0xFF	; 255
    151e:	88 81       	ld	r24, Y
    1520:	99 81       	ldd	r25, Y+1	; 0x01
    1522:	c7 5a       	subi	r28, 0xA7	; 167
    1524:	d0 40       	sbci	r29, 0x00	; 0
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	c9 55       	subi	r28, 0x59	; 89
    152a:	df 4f       	sbci	r29, 0xFF	; 255
    152c:	99 83       	std	Y+1, r25	; 0x01
    152e:	88 83       	st	Y, r24
    1530:	c7 5a       	subi	r28, 0xA7	; 167
    1532:	d0 40       	sbci	r29, 0x00	; 0
    1534:	c5 55       	subi	r28, 0x55	; 85
    1536:	df 4f       	sbci	r29, 0xFF	; 255
    1538:	98 81       	ld	r25, Y
    153a:	cb 5a       	subi	r28, 0xAB	; 171
    153c:	d0 40       	sbci	r29, 0x00	; 0
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	c5 55       	subi	r28, 0x55	; 85
    1542:	df 4f       	sbci	r29, 0xFF	; 255
    1544:	98 83       	st	Y, r25
    1546:	cb 5a       	subi	r28, 0xAB	; 171
    1548:	d0 40       	sbci	r29, 0x00	; 0
    154a:	c5 55       	subi	r28, 0x55	; 85
    154c:	df 4f       	sbci	r29, 0xFF	; 255
    154e:	e8 81       	ld	r30, Y
    1550:	cb 5a       	subi	r28, 0xAB	; 171
    1552:	d0 40       	sbci	r29, 0x00	; 0
    1554:	ee 23       	and	r30, r30
    1556:	31 f6       	brne	.-116    	; 0x14e4 <main+0xfa>
	/*
	 * initialize UART module to begin
	 * pass to it the address of the uart structure
	 * to substitute with its value in the init function
	 */
	UART_init(&uart);
    1558:	ce 01       	movw	r24, r28
    155a:	81 56       	subi	r24, 0x61	; 97
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <UART_init>

	/*
	 * enable the interrupt bit in the SREG register
	 * to be ready for any interrupt occur
	 */
	SREG |= (1<<7);
    1562:	af e5       	ldi	r26, 0x5F	; 95
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ef e5       	ldi	r30, 0x5F	; 95
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	80 68       	ori	r24, 0x80	; 128
    156e:	8c 93       	st	X, r24

	/*
	 * initialize the driver of LCD to begin
	 */
	LCD_init();
    1570:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_init>

	/*
	 * tell the control ECU that the human interface ECU is ready to receive
	 */
	UART_sendByte(ECU_READY);
    1574:	80 e1       	ldi	r24, 0x10	; 16
    1576:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
	/*
	 * receiving the order from the control ECU t know if it first time or not
	 * store the byte in startSystem local variable
	 */
	systemStarting= UART_recieveByte();
    157a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    157e:	fe 01       	movw	r30, r28
    1580:	ed 56       	subi	r30, 0x6D	; 109
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	80 83       	st	Z, r24


	/******************************************************************************************
	 *                      STAGE (1): First time to log in the program
	 *****************************************************************************************/
	if (systemStarting == FIRST_TIME_TO_LOG_IN)
    1586:	fe 01       	movw	r30, r28
    1588:	ed 56       	subi	r30, 0x6D	; 109
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	09 f0       	breq	.+2      	; 0x1594 <main+0x1aa>
    1592:	8b c2       	rjmp	.+1302   	; 0x1aaa <main+0x6c0>
		{
			/*
			 * call the function who is responsible  for the first
			 * log in to start the program for the first time
			 */
			start_System();
    1594:	0e 94 7b 07 	call	0xef6	; 0xef6 <start_System>
			 * after finishing the the welcome function, the two global
			 * passwords has been filled from the user inputs
			 * send them to the password_checkMismatch function to check if
			 * there is mismatch between them them or not
			 */
			pass_match = password_checkMismatch(g_password1, g_password2);
    1598:	8b ec       	ldi	r24, 0xCB	; 203
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	20 ed       	ldi	r18, 0xD0	; 208
    159e:	31 e0       	ldi	r19, 0x01	; 1
    15a0:	b9 01       	movw	r22, r18
    15a2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <password_checkMismatch>
    15a6:	fe 01       	movw	r30, r28
    15a8:	ee 56       	subi	r30, 0x6E	; 110
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 83       	st	Z, r24

			/*
			 * Actions if there is a mismatch between the two entered passwords
			 */
			if(pass_match == MISMATCH)
    15ae:	fe 01       	movw	r30, r28
    15b0:	ee 56       	subi	r30, 0x6E	; 110
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 81       	ld	r24, Z
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	09 f0       	breq	.+2      	; 0x15bc <main+0x1d2>
    15ba:	c8 c0       	rjmp	.+400    	; 0x174c <main+0x362>
				 *   mismatch between two passwords "Mismatch password"
				 *   3-force arrow of the LCD to go to the second line
				 *   4-display message to ask him to "Repeat steps"
				 *   5-keep the message on the screen for 3 seconds
				 */
				LCD_clearScreen();
    15bc:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Mismatch passwords");
    15c0:	21 e5       	ldi	r18, 0x51	; 81
    15c2:	31 e0       	ldi	r19, 0x01	; 1
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
				LCD_goToRowColumn(1,0);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
				LCD_displayStringRowColumn(1,0,"Repeat steps");
    15d6:	24 e6       	ldi	r18, 0x64	; 100
    15d8:	31 e0       	ldi	r19, 0x01	; 1
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	a9 01       	movw	r20, r18
    15e0:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    15e4:	fe 01       	movw	r30, r28
    15e6:	e7 57       	subi	r30, 0x77	; 119
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e8       	ldi	r25, 0x80	; 128
    15ee:	ab e3       	ldi	r26, 0x3B	; 59
    15f0:	b5 e4       	ldi	r27, 0x45	; 69
    15f2:	80 83       	st	Z, r24
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	a2 83       	std	Z+2, r26	; 0x02
    15f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	8e 01       	movw	r16, r28
    15fc:	0b 57       	subi	r16, 0x7B	; 123
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	fe 01       	movw	r30, r28
    1602:	e7 57       	subi	r30, 0x77	; 119
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a e7       	ldi	r20, 0x7A	; 122
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1628:	fe 01       	movw	r30, r28
    162a:	eb 57       	subi	r30, 0x7B	; 123
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	44 f4       	brge	.+16     	; 0x1656 <main+0x26c>
		__ticks = 1;
    1646:	fe 01       	movw	r30, r28
    1648:	ed 57       	subi	r30, 0x7D	; 125
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	64 c0       	rjmp	.+200    	; 0x171e <main+0x334>
	else if (__tmp > 65535)
    1656:	fe 01       	movw	r30, r28
    1658:	eb 57       	subi	r30, 0x7B	; 123
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	0c f0       	brlt	.+2      	; 0x1676 <main+0x28c>
    1674:	43 c0       	rjmp	.+134    	; 0x16fc <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	fe 01       	movw	r30, r28
    1678:	e7 57       	subi	r30, 0x77	; 119
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8e 01       	movw	r16, r28
    1696:	0d 57       	subi	r16, 0x7D	; 125
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	f8 01       	movw	r30, r16
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
    16ac:	1f c0       	rjmp	.+62     	; 0x16ec <main+0x302>
    16ae:	fe 01       	movw	r30, r28
    16b0:	ef 57       	subi	r30, 0x7F	; 127
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	89 e1       	ldi	r24, 0x19	; 25
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    16bc:	fe 01       	movw	r30, r28
    16be:	ef 57       	subi	r30, 0x7F	; 127
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <main+0x2dc>
    16ca:	fe 01       	movw	r30, r28
    16cc:	ef 57       	subi	r30, 0x7F	; 127
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	de 01       	movw	r26, r28
    16d6:	ad 57       	subi	r26, 0x7D	; 125
    16d8:	bf 4f       	sbci	r27, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	ed 57       	subi	r30, 0x7D	; 125
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	11 96       	adiw	r26, 0x01	; 1
    16e8:	9c 93       	st	X, r25
    16ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	fe 01       	movw	r30, r28
    16ee:	ed 57       	subi	r30, 0x7D	; 125
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	d1 f6       	brne	.-76     	; 0x16ae <main+0x2c4>
    16fa:	28 c0       	rjmp	.+80     	; 0x174c <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	8e 01       	movw	r16, r28
    16fe:	0d 57       	subi	r16, 0x7D	; 125
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	eb 57       	subi	r30, 0x7B	; 123
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	f8 01       	movw	r30, r16
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	80 83       	st	Z, r24
    171e:	de 01       	movw	r26, r28
    1720:	a1 58       	subi	r26, 0x81	; 129
    1722:	bf 4f       	sbci	r27, 0xFF	; 255
    1724:	fe 01       	movw	r30, r28
    1726:	ed 57       	subi	r30, 0x7D	; 125
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	9c 93       	st	X, r25
    1732:	8e 93       	st	-X, r24
    1734:	fe 01       	movw	r30, r28
    1736:	e1 58       	subi	r30, 0x81	; 129
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <main+0x354>
    1742:	fe 01       	movw	r30, r28
    1744:	e1 58       	subi	r30, 0x81	; 129
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24

			/*
			 * do- as we want to do this step one time at least
			 * while - to repeat the same steps if there is a mismatch in the two entered passwords
			 */
		}while(pass_match == MISMATCH);
    174c:	fe 01       	movw	r30, r28
    174e:	ee 56       	subi	r30, 0x6E	; 110
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	09 f4       	brne	.+2      	; 0x175a <main+0x370>
    1758:	1d cf       	rjmp	.-454    	; 0x1594 <main+0x1aa>

		/*
		 *if there is no mismatch in the two entered passwords
		 *and the two entered password equal to each other
		 */
		if(pass_match == MATCH)
    175a:	fe 01       	movw	r30, r28
    175c:	ee 56       	subi	r30, 0x6E	; 110
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	88 23       	and	r24, r24
    1764:	09 f0       	breq	.+2      	; 0x1768 <main+0x37e>
    1766:	a1 c1       	rjmp	.+834    	; 0x1aaa <main+0x6c0>

			/*
			 *now it can be stored in the non-volatile memory
			 *so it is time to send the password to store it in the memory
			 */
			for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    1768:	fe 01       	movw	r30, r28
    176a:	ef 56       	subi	r30, 0x6F	; 111
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	10 82       	st	Z, r1
    1770:	cc c0       	rjmp	.+408    	; 0x190a <main+0x520>
			{
				/*
				 * wait for the control ECU to be ready to
				 * send the password to it byte by byte using UART
				 */
				while(UART_recieveByte() != ECU_READY){}
    1772:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    1776:	80 31       	cpi	r24, 0x10	; 16
    1778:	e1 f7       	brne	.-8      	; 0x1772 <main+0x388>
				UART_sendByte(g_password1[counter]);
    177a:	fe 01       	movw	r30, r28
    177c:	ef 56       	subi	r30, 0x6F	; 111
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 81       	ld	r24, Z
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	fc 01       	movw	r30, r24
    1788:	e5 53       	subi	r30, 0x35	; 53
    178a:	fe 4f       	sbci	r31, 0xFE	; 254
    178c:	80 81       	ld	r24, Z
    178e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
    1792:	fe 01       	movw	r30, r28
    1794:	e5 58       	subi	r30, 0x85	; 133
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 ea       	ldi	r26, 0xA0	; 160
    179e:	b2 e4       	ldi	r27, 0x42	; 66
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	8e 01       	movw	r16, r28
    17aa:	09 58       	subi	r16, 0x89	; 137
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	e5 58       	subi	r30, 0x85	; 133
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d6:	fe 01       	movw	r30, r28
    17d8:	e9 58       	subi	r30, 0x89	; 137
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	44 f4       	brge	.+16     	; 0x1804 <main+0x41a>
		__ticks = 1;
    17f4:	fe 01       	movw	r30, r28
    17f6:	eb 58       	subi	r30, 0x8B	; 139
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	64 c0       	rjmp	.+200    	; 0x18cc <main+0x4e2>
	else if (__tmp > 65535)
    1804:	fe 01       	movw	r30, r28
    1806:	e9 58       	subi	r30, 0x89	; 137
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	0c f0       	brlt	.+2      	; 0x1824 <main+0x43a>
    1822:	43 c0       	rjmp	.+134    	; 0x18aa <main+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	fe 01       	movw	r30, r28
    1826:	e5 58       	subi	r30, 0x85	; 133
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e 01       	movw	r16, r28
    1844:	0b 58       	subi	r16, 0x8B	; 139
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	f8 01       	movw	r30, r16
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	1f c0       	rjmp	.+62     	; 0x189a <main+0x4b0>
    185c:	fe 01       	movw	r30, r28
    185e:	ed 58       	subi	r30, 0x8D	; 141
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	89 e1       	ldi	r24, 0x19	; 25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    186a:	fe 01       	movw	r30, r28
    186c:	ed 58       	subi	r30, 0x8D	; 141
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0x48a>
    1878:	fe 01       	movw	r30, r28
    187a:	ed 58       	subi	r30, 0x8D	; 141
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	de 01       	movw	r26, r28
    1884:	ab 58       	subi	r26, 0x8B	; 139
    1886:	bf 4f       	sbci	r27, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	eb 58       	subi	r30, 0x8B	; 139
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	fe 01       	movw	r30, r28
    189c:	eb 58       	subi	r30, 0x8B	; 139
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	d1 f6       	brne	.-76     	; 0x185c <main+0x472>
    18a8:	27 c0       	rjmp	.+78     	; 0x18f8 <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	8e 01       	movw	r16, r28
    18ac:	0b 58       	subi	r16, 0x8B	; 139
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e9 58       	subi	r30, 0x89	; 137
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	de 01       	movw	r26, r28
    18ce:	af 58       	subi	r26, 0x8F	; 143
    18d0:	bf 4f       	sbci	r27, 0xFF	; 255
    18d2:	fe 01       	movw	r30, r28
    18d4:	eb 58       	subi	r30, 0x8B	; 139
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	8d 93       	st	X+, r24
    18de:	9c 93       	st	X, r25
    18e0:	fe 01       	movw	r30, r28
    18e2:	ef 58       	subi	r30, 0x8F	; 143
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <main+0x500>
    18ee:	fe 01       	movw	r30, r28
    18f0:	ef 58       	subi	r30, 0x8F	; 143
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24

			/*
			 *now it can be stored in the non-volatile memory
			 *so it is time to send the password to store it in the memory
			 */
			for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    18f8:	de 01       	movw	r26, r28
    18fa:	af 56       	subi	r26, 0x6F	; 111
    18fc:	bf 4f       	sbci	r27, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	ef 56       	subi	r30, 0x6F	; 111
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	8c 93       	st	X, r24
    190a:	fe 01       	movw	r30, r28
    190c:	ef 56       	subi	r30, 0x6F	; 111
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	85 30       	cpi	r24, 0x05	; 5
    1914:	08 f4       	brcc	.+2      	; 0x1918 <main+0x52e>
    1916:	2d cf       	rjmp	.-422    	; 0x1772 <main+0x388>
			 *   3-force arrow of the LCD to go to the second line
			 *   4-display message for user "Successfully"
			 *   5-keep the message on the screen for 4 seconds
			 *   6-clear the LCD screen
			 */
			LCD_clearScreen();
    1918:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Password saved");
    191c:	21 e7       	ldi	r18, 0x71	; 113
    191e:	31 e0       	ldi	r19, 0x01	; 1
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	a9 01       	movw	r20, r18
    1926:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,0);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
			LCD_displayStringRowColumn(1,0,"Successfully");
    1932:	20 e8       	ldi	r18, 0x80	; 128
    1934:	31 e0       	ldi	r19, 0x01	; 1
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	a9 01       	movw	r20, r18
    193c:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    1940:	fe 01       	movw	r30, r28
    1942:	e3 59       	subi	r30, 0x93	; 147
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	aa e7       	ldi	r26, 0x7A	; 122
    194c:	b5 e4       	ldi	r27, 0x45	; 69
    194e:	80 83       	st	Z, r24
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	a2 83       	std	Z+2, r26	; 0x02
    1954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	8e 01       	movw	r16, r28
    1958:	07 59       	subi	r16, 0x97	; 151
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	e3 59       	subi	r30, 0x93	; 147
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	4a e7       	ldi	r20, 0x7A	; 122
    1970:	53 e4       	ldi	r21, 0x43	; 67
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	80 83       	st	Z, r24
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	a2 83       	std	Z+2, r26	; 0x02
    1982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1984:	fe 01       	movw	r30, r28
    1986:	e7 59       	subi	r30, 0x97	; 151
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	44 f4       	brge	.+16     	; 0x19b2 <main+0x5c8>
		__ticks = 1;
    19a2:	fe 01       	movw	r30, r28
    19a4:	e9 59       	subi	r30, 0x99	; 153
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
    19b0:	64 c0       	rjmp	.+200    	; 0x1a7a <main+0x690>
	else if (__tmp > 65535)
    19b2:	fe 01       	movw	r30, r28
    19b4:	e7 59       	subi	r30, 0x97	; 151
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <main+0x5e8>
    19d0:	43 c0       	rjmp	.+134    	; 0x1a58 <main+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	fe 01       	movw	r30, r28
    19d4:	e3 59       	subi	r30, 0x93	; 147
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8e 01       	movw	r16, r28
    19f2:	09 59       	subi	r16, 0x99	; 153
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	1f c0       	rjmp	.+62     	; 0x1a48 <main+0x65e>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	eb 59       	subi	r30, 0x9B	; 155
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	89 e1       	ldi	r24, 0x19	; 25
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
    1a18:	fe 01       	movw	r30, r28
    1a1a:	eb 59       	subi	r30, 0x9B	; 155
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <main+0x638>
    1a26:	fe 01       	movw	r30, r28
    1a28:	eb 59       	subi	r30, 0x9B	; 155
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	de 01       	movw	r26, r28
    1a32:	a9 59       	subi	r26, 0x99	; 153
    1a34:	bf 4f       	sbci	r27, 0xFF	; 255
    1a36:	fe 01       	movw	r30, r28
    1a38:	e9 59       	subi	r30, 0x99	; 153
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	11 96       	adiw	r26, 0x01	; 1
    1a44:	9c 93       	st	X, r25
    1a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e9 59       	subi	r30, 0x99	; 153
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	d1 f6       	brne	.-76     	; 0x1a0a <main+0x620>
    1a56:	27 c0       	rjmp	.+78     	; 0x1aa6 <main+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	8e 01       	movw	r16, r28
    1a5a:	09 59       	subi	r16, 0x99	; 153
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e7 59       	subi	r30, 0x97	; 151
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	f8 01       	movw	r30, r16
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	de 01       	movw	r26, r28
    1a7c:	ad 59       	subi	r26, 0x9D	; 157
    1a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	e9 59       	subi	r30, 0x99	; 153
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	8d 93       	st	X+, r24
    1a8c:	9c 93       	st	X, r25
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ed 59       	subi	r30, 0x9D	; 157
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <main+0x6ae>
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ed 59       	subi	r30, 0x9D	; 157
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
			_delay_ms(4000);
			LCD_clearScreen();
    1aa6:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
		/*
		 * call the function select_Option which is responsible
		 * to give the user chance to select option from two
		 * options: change the password or open the door
		 */
		decision = select_Option();
    1aaa:	0e 94 a3 05 	call	0xb46	; 0xb46 <select_Option>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e1 57       	subi	r30, 0x71	; 113
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 83       	st	Z, r24

		/*
		 * option to change the password if the selected
		 * option is first choice
		 */
		if(decision == CHOICE_1)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e1 57       	subi	r30, 0x71	; 113
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <main+0x6da>
    1ac2:	d7 c3       	rjmp	.+1966   	; 0x2272 <main+0xe88>
		{
			/*
			 * send the choice byte to the control ECU
			 * to make him ready for tasks of this choice
			 */
			while(UART_recieveByte() != ECU_READY){}
    1ac4:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    1ac8:	80 31       	cpi	r24, 0x10	; 16
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <main+0x6da>
			UART_sendByte(decision);
    1acc:	fe 01       	movw	r30, r28
    1ace:	e1 57       	subi	r30, 0x71	; 113
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
				 * Before enable user to change the password ask him first
				 * to enter the stored password to compare it with the
				 * original password
				 */

				store_Password(g_password2);
    1ad8:	80 ed       	ldi	r24, 0xD0	; 208
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 92 06 	call	0xd24	; 0xd24 <store_Password>

				/*
				 * send the entered password to control ECU to
				 * check if it equals to the original password or not
				 */
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ef 56       	subi	r30, 0x6F	; 111
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	10 82       	st	Z, r1
    1ae8:	cc c0       	rjmp	.+408    	; 0x1c82 <main+0x898>
				{
					/*
					 * wait for the control ECU to be ready to
					 * send the password to it byte by byte using UART
					 */
					while(UART_recieveByte() != ECU_READY){}
    1aea:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    1aee:	80 31       	cpi	r24, 0x10	; 16
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <main+0x700>
					UART_sendByte(g_password2[counter]);
    1af2:	fe 01       	movw	r30, r28
    1af4:	ef 56       	subi	r30, 0x6F	; 111
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	fc 01       	movw	r30, r24
    1b00:	e0 53       	subi	r30, 0x30	; 48
    1b02:	fe 4f       	sbci	r31, 0xFE	; 254
    1b04:	80 81       	ld	r24, Z
    1b06:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e1 5a       	subi	r30, 0xA1	; 161
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 ea       	ldi	r26, 0xA0	; 160
    1b16:	b2 e4       	ldi	r27, 0x42	; 66
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	8e 01       	movw	r16, r28
    1b22:	05 5a       	subi	r16, 0xA5	; 165
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	fe 01       	movw	r30, r28
    1b28:	e1 5a       	subi	r30, 0xA1	; 161
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a e7       	ldi	r20, 0x7A	; 122
    1b3a:	53 e4       	ldi	r21, 0x43	; 67
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e5 5a       	subi	r30, 0xA5	; 165
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	44 f4       	brge	.+16     	; 0x1b7c <main+0x792>
		__ticks = 1;
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e7 5a       	subi	r30, 0xA7	; 167
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	64 c0       	rjmp	.+200    	; 0x1c44 <main+0x85a>
	else if (__tmp > 65535)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e5 5a       	subi	r30, 0xA5	; 165
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <main+0x7b2>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <main+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e1 5a       	subi	r30, 0xA1	; 161
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8e 01       	movw	r16, r28
    1bbc:	07 5a       	subi	r16, 0xA7	; 167
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	1f c0       	rjmp	.+62     	; 0x1c12 <main+0x828>
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e9 5a       	subi	r30, 0xA9	; 169
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	89 e1       	ldi	r24, 0x19	; 25
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
    1be2:	fe 01       	movw	r30, r28
    1be4:	e9 5a       	subi	r30, 0xA9	; 169
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <main+0x802>
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e9 5a       	subi	r30, 0xA9	; 169
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	de 01       	movw	r26, r28
    1bfc:	a7 5a       	subi	r26, 0xA7	; 167
    1bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1c00:	fe 01       	movw	r30, r28
    1c02:	e7 5a       	subi	r30, 0xA7	; 167
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	9c 93       	st	X, r25
    1c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e7 5a       	subi	r30, 0xA7	; 167
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	d1 f6       	brne	.-76     	; 0x1bd4 <main+0x7ea>
    1c20:	27 c0       	rjmp	.+78     	; 0x1c70 <main+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	8e 01       	movw	r16, r28
    1c24:	07 5a       	subi	r16, 0xA7	; 167
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e5 5a       	subi	r30, 0xA5	; 165
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	de 01       	movw	r26, r28
    1c46:	ab 5a       	subi	r26, 0xAB	; 171
    1c48:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5a       	subi	r30, 0xA7	; 167
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	8d 93       	st	X+, r24
    1c56:	9c 93       	st	X, r25
    1c58:	fe 01       	movw	r30, r28
    1c5a:	eb 5a       	subi	r30, 0xAB	; 171
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <main+0x878>
    1c66:	fe 01       	movw	r30, r28
    1c68:	eb 5a       	subi	r30, 0xAB	; 171
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24

				/*
				 * send the entered password to control ECU to
				 * check if it equals to the original password or not
				 */
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    1c70:	de 01       	movw	r26, r28
    1c72:	af 56       	subi	r26, 0x6F	; 111
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	ef 56       	subi	r30, 0x6F	; 111
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	8c 93       	st	X, r24
    1c82:	fe 01       	movw	r30, r28
    1c84:	ef 56       	subi	r30, 0x6F	; 111
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 81       	ld	r24, Z
    1c8a:	85 30       	cpi	r24, 0x05	; 5
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <main+0x8a6>
    1c8e:	2d cf       	rjmp	.-422    	; 0x1aea <main+0x700>
				/*
				 * after sending the password to control ECU
				 * wait until Control ECU send byte that if the entered password matches original
				 *  or not, and told it that HMI ECU is ready to receive the byte
				 */
				UART_sendByte(ECU_READY);
    1c90:	80 e1       	ldi	r24, 0x10	; 16
    1c92:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
				/*
				 *store the received byte in local variable check_EEPROM
				 */
				check_EEPROM = UART_recieveByte();
    1c96:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e0 57       	subi	r30, 0x70	; 112
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 83       	st	Z, r24

				/*
				 *if the message from the control ECU tell HMI that
				 * there is mismatch between two entered passwords
				 */
				if(check_EEPROM == MISMATCH)
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e0 57       	subi	r30, 0x70	; 112
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <main+0x8c6>
    1cae:	ee c0       	rjmp	.+476    	; 0x1e8c <main+0xaa2>
					 *   3-force arrow of the LCD to go to the second line
					 *   4-display message to ask him to "TRY AGAIN!"
					 *   5-keep the message on the screen for 3 seconds
					 */

					LCD_clearScreen();
    1cb0:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Sorry Invalid Pass ");
    1cb4:	2d e8       	ldi	r18, 0x8D	; 141
    1cb6:	31 e0       	ldi	r19, 0x01	; 1
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
					LCD_goToRowColumn(1,0);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
					LCD_displayStringRowColumn(1,0,"TRY AGAIN!");
    1cca:	21 ea       	ldi	r18, 0xA1	; 161
    1ccc:	31 e0       	ldi	r19, 0x01	; 1
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ef 5a       	subi	r30, 0xAF	; 175
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e8       	ldi	r25, 0x80	; 128
    1ce2:	ab e3       	ldi	r26, 0x3B	; 59
    1ce4:	b5 e4       	ldi	r27, 0x45	; 69
    1ce6:	80 83       	st	Z, r24
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	a2 83       	std	Z+2, r26	; 0x02
    1cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	8e 01       	movw	r16, r28
    1cf0:	03 5b       	subi	r16, 0xB3	; 179
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ef 5a       	subi	r30, 0xAF	; 175
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a e7       	ldi	r20, 0x7A	; 122
    1d08:	53 e4       	ldi	r21, 0x43	; 67
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	f8 01       	movw	r30, r16
    1d14:	80 83       	st	Z, r24
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	a2 83       	std	Z+2, r26	; 0x02
    1d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e3 5b       	subi	r30, 0xB3	; 179
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	44 f4       	brge	.+16     	; 0x1d4a <main+0x960>
		__ticks = 1;
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e5 5b       	subi	r30, 0xB5	; 181
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
    1d48:	64 c0       	rjmp	.+200    	; 0x1e12 <main+0xa28>
	else if (__tmp > 65535)
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e3 5b       	subi	r30, 0xB3	; 179
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	0c f0       	brlt	.+2      	; 0x1d6a <main+0x980>
    1d68:	43 c0       	rjmp	.+134    	; 0x1df0 <main+0xa06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ef 5a       	subi	r30, 0xAF	; 175
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8e 01       	movw	r16, r28
    1d8a:	05 5b       	subi	r16, 0xB5	; 181
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <main+0x9f6>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 5b       	subi	r30, 0xB7	; 183
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	89 e1       	ldi	r24, 0x19	; 25
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	fe 01       	movw	r30, r28
    1db2:	e7 5b       	subi	r30, 0xB7	; 183
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <main+0x9d0>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e7 5b       	subi	r30, 0xB7	; 183
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	de 01       	movw	r26, r28
    1dca:	a5 5b       	subi	r26, 0xB5	; 181
    1dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5b       	subi	r30, 0xB5	; 181
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	11 96       	adiw	r26, 0x01	; 1
    1ddc:	9c 93       	st	X, r25
    1dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	fe 01       	movw	r30, r28
    1de2:	e5 5b       	subi	r30, 0xB5	; 181
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	d1 f6       	brne	.-76     	; 0x1da2 <main+0x9b8>
    1dee:	27 c0       	rjmp	.+78     	; 0x1e3e <main+0xa54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	8e 01       	movw	r16, r28
    1df2:	05 5b       	subi	r16, 0xB5	; 181
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	fe 01       	movw	r30, r28
    1df8:	e3 5b       	subi	r30, 0xB3	; 179
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	de 01       	movw	r26, r28
    1e14:	a9 5b       	subi	r26, 0xB9	; 185
    1e16:	bf 4f       	sbci	r27, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e5 5b       	subi	r30, 0xB5	; 181
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	8d 93       	st	X+, r24
    1e24:	9c 93       	st	X, r25
    1e26:	fe 01       	movw	r30, r28
    1e28:	e9 5b       	subi	r30, 0xB9	; 185
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <main+0xa46>
    1e34:	fe 01       	movw	r30, r28
    1e36:	e9 5b       	subi	r30, 0xB9	; 185
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24

					/*
					 *increment the danger_error to be indicator for number of
					 *valid tries to let the user be able to enter the pass
					 */
					danger_error++;
    1e3e:	de 01       	movw	r26, r28
    1e40:	a2 57       	subi	r26, 0x72	; 114
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e2 57       	subi	r30, 0x72	; 114
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	8c 93       	st	X, r24

					/******************************************************************************************
					 *                                THIEF MODE in STAGE (3-1)
					 *****************************************************************************************/

					if(danger_error == ALLOWED_TRIES_TO_ENTER_PASSWORD)
    1e50:	fe 01       	movw	r30, r28
    1e52:	e2 57       	subi	r30, 0x72	; 114
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	c1 f4       	brne	.+48     	; 0x1e8c <main+0xaa2>
						/*
						 * call the function Timer_setCallBack and give it
						 * the address of function timerdanger to force the timer ISR
						 * to call this function every interrupt occur, "every one second"
						 */
						Timer_setCallBack(timerDanger, Timer1);
    1e5c:	85 ec       	ldi	r24, 0xC5	; 197
    1e5e:	99 e0       	ldi	r25, 0x09	; 9
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	0e 94 4f 1c 	call	0x389e	; 0x389e <Timer_setCallBack>

						/*
						 * call the function of LCD clear screen to be ready
						 * for the called function will display on LCD
						 */
						LCD_clearScreen();
    1e66:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
						 * Start the timer to count
						 * give it the address of the declared structure
						 * to put its values in the initialization function
						 * in the entire registers of the timer
						 */
						Timer_init(&timer);
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	8c 56       	subi	r24, 0x6C	; 108
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	0e 94 c3 19 	call	0x3386	; 0x3386 <Timer_init>
						/*
						 *pooling to hold the whole program until the thief event finished
						 * to make all peripherals keyPad , LCD pooled with no work
						 * until the action of Buzzer ends successfully
						 */
						while(g_holdSystem != RESUME_SYSTEM){}
    1e74:	80 91 b4 01 	lds	r24, 0x01B4
    1e78:	88 23       	and	r24, r24
    1e7a:	e1 f7       	brne	.-8      	; 0x1e74 <main+0xa8a>
						/*
						 * return the state of the g_holdSystem to be hold again
						 * after being RESUME to be ready for any required
						 * action to hold the system again
						 */
						g_holdSystem = HOLD_SYSTEM;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	80 93 b4 01 	sts	0x01B4, r24
						/*
						 * change the state of the restart main program to TRUE state
						 * to terminate from the while loop and make
						 * the force the program to start from the basic options
						 */
						restart_mainProgram = TRUE;
    1e82:	fe 01       	movw	r30, r28
    1e84:	e3 57       	subi	r30, 0x73	; 115
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	80 83       	st	Z, r24
				/*
				 * to continue repeating the same steps if the entered password NOT
				 * matches the original password and the state to restart
				 * the program is false
				 */
			}while( (check_EEPROM ==  MISMATCH) && (restart_mainProgram == FALSE) );
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e0 57       	subi	r30, 0x70	; 112
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	39 f4       	brne	.+14     	; 0x1ea6 <main+0xabc>
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e3 57       	subi	r30, 0x73	; 115
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <main+0xabc>
    1ea4:	19 ce       	rjmp	.-974    	; 0x1ad8 <main+0x6ee>
			 *****************************************************************************************/
			/*
			 *if the message from the control ECU tell HMI that
			 * there is NO mismatch between two entered passwords
			 */
			if (check_EEPROM == MATCH)
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e0 57       	subi	r30, 0x70	; 112
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <main+0xaca>
    1eb2:	da c1       	rjmp	.+948    	; 0x2268 <main+0xe7e>
				{
					/*
					 * call the function who is responsible  for the first
					 * log in to start the program for the first time
					 */
					start_System();
    1eb4:	0e 94 7b 07 	call	0xef6	; 0xef6 <start_System>
					 * after finishing the the welcome function, the two global
					 * passwords has been filled from the user inputs
					 * send them to the password_checkMismatch function to check if
					 * there is mismatch between them them or not
					 */
					pass_match = password_checkMismatch(g_password1, g_password2);
    1eb8:	8b ec       	ldi	r24, 0xCB	; 203
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	20 ed       	ldi	r18, 0xD0	; 208
    1ebe:	31 e0       	ldi	r19, 0x01	; 1
    1ec0:	b9 01       	movw	r22, r18
    1ec2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <password_checkMismatch>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ee 56       	subi	r30, 0x6E	; 110
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 83       	st	Z, r24

					/*
					 * Actions if there is a mismatch between the two entered passwords
					 */
					if(pass_match == MISMATCH)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ee 56       	subi	r30, 0x6E	; 110
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <main+0xaf2>
    1eda:	99 c0       	rjmp	.+306    	; 0x200e <main+0xc24>
						 *   mismatch between two passwords "Mismatch password"
						 *   3-force arrow of the LCD to go to the second line
						 *   4-display message to ask him to "Repeat steps"
						 *   5-keep the message on the screen for 3 seconds
						 */
						LCD_clearScreen();
    1edc:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Mismatch passwords");
    1ee0:	21 e5       	ldi	r18, 0x51	; 81
    1ee2:	31 e0       	ldi	r19, 0x01	; 1
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	a9 01       	movw	r20, r18
    1eea:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
						LCD_goToRowColumn(1,0);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
						LCD_displayStringRowColumn(1,0,"Repeat steps");
    1ef6:	24 e6       	ldi	r18, 0x64	; 100
    1ef8:	31 e0       	ldi	r19, 0x01	; 1
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    1f04:	fe 01       	movw	r30, r28
    1f06:	ed 5b       	subi	r30, 0xBD	; 189
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e8       	ldi	r25, 0x80	; 128
    1f0e:	ab e3       	ldi	r26, 0x3B	; 59
    1f10:	b5 e4       	ldi	r27, 0x45	; 69
    1f12:	80 83       	st	Z, r24
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	a2 83       	std	Z+2, r26	; 0x02
    1f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	8e 01       	movw	r16, r28
    1f1c:	01 5c       	subi	r16, 0xC1	; 193
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	fe 01       	movw	r30, r28
    1f22:	ed 5b       	subi	r30, 0xBD	; 189
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a e7       	ldi	r20, 0x7A	; 122
    1f34:	53 e4       	ldi	r21, 0x43	; 67
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	f8 01       	movw	r30, r16
    1f40:	80 83       	st	Z, r24
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	a2 83       	std	Z+2, r26	; 0x02
    1f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ff 96       	adiw	r30, 0x3f	; 63
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <main+0xb84>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e af       	std	Y+62, r25	; 0x3e
    1f6a:	8d af       	std	Y+61, r24	; 0x3d
    1f6c:	46 c0       	rjmp	.+140    	; 0x1ffa <main+0xc10>
	else if (__tmp > 65535)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ff 96       	adiw	r30, 0x3f	; 63
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	64 f5       	brge	.+88     	; 0x1fe2 <main+0xbf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ed 5b       	subi	r30, 0xBD	; 189
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9e af       	std	Y+62, r25	; 0x3e
    1fb6:	8d af       	std	Y+61, r24	; 0x3d
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <main+0xbee>
    1fba:	89 e1       	ldi	r24, 0x19	; 25
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9c af       	std	Y+60, r25	; 0x3c
    1fc0:	8b af       	std	Y+59, r24	; 0x3b
    1fc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fc4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <main+0xbdc>
    1fca:	9c af       	std	Y+60, r25	; 0x3c
    1fcc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9e af       	std	Y+62, r25	; 0x3e
    1fd6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fda:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <main+0xbd0>
    1fe0:	16 c0       	rjmp	.+44     	; 0x200e <main+0xc24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ff 96       	adiw	r30, 0x3f	; 63
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9e af       	std	Y+62, r25	; 0x3e
    1ff8:	8d af       	std	Y+61, r24	; 0x3d
    1ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ffe:	9a af       	std	Y+58, r25	; 0x3a
    2000:	89 af       	std	Y+57, r24	; 0x39
    2002:	89 ad       	ldd	r24, Y+57	; 0x39
    2004:	9a ad       	ldd	r25, Y+58	; 0x3a
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <main+0xc1c>
    200a:	9a af       	std	Y+58, r25	; 0x3a
    200c:	89 af       	std	Y+57, r24	; 0x39
					/*
					 * do- as we want to do this step one time at least
					 * while - to repeat the same steps if there is a
					 * mismatch in the two entered passwords
					 */
				}while(pass_match == MISMATCH);
    200e:	fe 01       	movw	r30, r28
    2010:	ee 56       	subi	r30, 0x6E	; 110
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	09 f4       	brne	.+2      	; 0x201c <main+0xc32>
    201a:	4c cf       	rjmp	.-360    	; 0x1eb4 <main+0xaca>

				/*
				 *if there is no mismatch in the two entered passwords
				 *and the two entered password equal to each other
				 */
				if(pass_match == MATCH)
    201c:	fe 01       	movw	r30, r28
    201e:	ee 56       	subi	r30, 0x6E	; 110
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	88 23       	and	r24, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <main+0xc40>
    2028:	1f c1       	rjmp	.+574    	; 0x2268 <main+0xe7e>

					/*
					 *now it can be stored in the non-volatile memory
					 *so it is time to send the password to store it in the memory
					 */
					for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    202a:	fe 01       	movw	r30, r28
    202c:	ef 56       	subi	r30, 0x6F	; 111
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	10 82       	st	Z, r1
    2032:	8b c0       	rjmp	.+278    	; 0x214a <main+0xd60>
					{
						/*
						 * wait for the control ECU to be ready to
						 * send the password to it byte by byte using UART
						 */
						while(UART_recieveByte() != ECU_READY){}
    2034:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    2038:	80 31       	cpi	r24, 0x10	; 16
    203a:	e1 f7       	brne	.-8      	; 0x2034 <main+0xc4a>
						UART_sendByte(g_password1[counter]);
    203c:	fe 01       	movw	r30, r28
    203e:	ef 56       	subi	r30, 0x6F	; 111
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	fc 01       	movw	r30, r24
    204a:	e5 53       	subi	r30, 0x35	; 53
    204c:	fe 4f       	sbci	r31, 0xFE	; 254
    204e:	80 81       	ld	r24, Z
    2050:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a0 ea       	ldi	r26, 0xA0	; 160
    205a:	b2 e4       	ldi	r27, 0x42	; 66
    205c:	8d ab       	std	Y+53, r24	; 0x35
    205e:	9e ab       	std	Y+54, r25	; 0x36
    2060:	af ab       	std	Y+55, r26	; 0x37
    2062:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2064:	6d a9       	ldd	r22, Y+53	; 0x35
    2066:	7e a9       	ldd	r23, Y+54	; 0x36
    2068:	8f a9       	ldd	r24, Y+55	; 0x37
    206a:	98 ad       	ldd	r25, Y+56	; 0x38
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a e7       	ldi	r20, 0x7A	; 122
    2072:	53 e4       	ldi	r21, 0x43	; 67
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	89 ab       	std	Y+49, r24	; 0x31
    207e:	9a ab       	std	Y+50, r25	; 0x32
    2080:	ab ab       	std	Y+51, r26	; 0x33
    2082:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2084:	69 a9       	ldd	r22, Y+49	; 0x31
    2086:	7a a9       	ldd	r23, Y+50	; 0x32
    2088:	8b a9       	ldd	r24, Y+51	; 0x33
    208a:	9c a9       	ldd	r25, Y+52	; 0x34
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2098:	88 23       	and	r24, r24
    209a:	2c f4       	brge	.+10     	; 0x20a6 <main+0xcbc>
		__ticks = 1;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	98 ab       	std	Y+48, r25	; 0x30
    20a2:	8f a7       	std	Y+47, r24	; 0x2f
    20a4:	3f c0       	rjmp	.+126    	; 0x2124 <main+0xd3a>
	else if (__tmp > 65535)
    20a6:	69 a9       	ldd	r22, Y+49	; 0x31
    20a8:	7a a9       	ldd	r23, Y+50	; 0x32
    20aa:	8b a9       	ldd	r24, Y+51	; 0x33
    20ac:	9c a9       	ldd	r25, Y+52	; 0x34
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	4c f5       	brge	.+82     	; 0x2110 <main+0xd26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	6d a9       	ldd	r22, Y+53	; 0x35
    20c0:	7e a9       	ldd	r23, Y+54	; 0x36
    20c2:	8f a9       	ldd	r24, Y+55	; 0x37
    20c4:	98 ad       	ldd	r25, Y+56	; 0x38
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e2       	ldi	r20, 0x20	; 32
    20cc:	51 e4       	ldi	r21, 0x41	; 65
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	98 ab       	std	Y+48, r25	; 0x30
    20e4:	8f a7       	std	Y+47, r24	; 0x2f
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <main+0xd1c>
    20e8:	89 e1       	ldi	r24, 0x19	; 25
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9e a7       	std	Y+46, r25	; 0x2e
    20ee:	8d a7       	std	Y+45, r24	; 0x2d
    20f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    20f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <main+0xd0a>
    20f8:	9e a7       	std	Y+46, r25	; 0x2e
    20fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	98 ab       	std	Y+48, r25	; 0x30
    2104:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	8f a5       	ldd	r24, Y+47	; 0x2f
    2108:	98 a9       	ldd	r25, Y+48	; 0x30
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	69 f7       	brne	.-38     	; 0x20e8 <main+0xcfe>
    210e:	14 c0       	rjmp	.+40     	; 0x2138 <main+0xd4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2110:	69 a9       	ldd	r22, Y+49	; 0x31
    2112:	7a a9       	ldd	r23, Y+50	; 0x32
    2114:	8b a9       	ldd	r24, Y+51	; 0x33
    2116:	9c a9       	ldd	r25, Y+52	; 0x34
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	98 ab       	std	Y+48, r25	; 0x30
    2122:	8f a7       	std	Y+47, r24	; 0x2f
    2124:	8f a5       	ldd	r24, Y+47	; 0x2f
    2126:	98 a9       	ldd	r25, Y+48	; 0x30
    2128:	9c a7       	std	Y+44, r25	; 0x2c
    212a:	8b a7       	std	Y+43, r24	; 0x2b
    212c:	8b a5       	ldd	r24, Y+43	; 0x2b
    212e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <main+0xd46>
    2134:	9c a7       	std	Y+44, r25	; 0x2c
    2136:	8b a7       	std	Y+43, r24	; 0x2b

					/*
					 *now it can be stored in the non-volatile memory
					 *so it is time to send the password to store it in the memory
					 */
					for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    2138:	de 01       	movw	r26, r28
    213a:	af 56       	subi	r26, 0x6F	; 111
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	ef 56       	subi	r30, 0x6F	; 111
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	8c 93       	st	X, r24
    214a:	fe 01       	movw	r30, r28
    214c:	ef 56       	subi	r30, 0x6F	; 111
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	85 30       	cpi	r24, 0x05	; 5
    2154:	08 f4       	brcc	.+2      	; 0x2158 <main+0xd6e>
    2156:	6e cf       	rjmp	.-292    	; 0x2034 <main+0xc4a>
					 *   3-force arrow of the LCD to go to the second line
					 *   4-display message for user "Successfully"
					 *   5-keep the message on the screen for 4 seconds
					 *   6-clear the LCD screen
					 */
					LCD_clearScreen();
    2158:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Password saved");
    215c:	21 e7       	ldi	r18, 0x71	; 113
    215e:	31 e0       	ldi	r19, 0x01	; 1
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	a9 01       	movw	r20, r18
    2166:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
					LCD_goToRowColumn(1,0);
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
					LCD_displayStringRowColumn(1,0,"Successfully");
    2172:	20 e8       	ldi	r18, 0x80	; 128
    2174:	31 e0       	ldi	r19, 0x01	; 1
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	a9 01       	movw	r20, r18
    217c:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	aa e7       	ldi	r26, 0x7A	; 122
    2186:	b5 e4       	ldi	r27, 0x45	; 69
    2188:	8f a3       	std	Y+39, r24	; 0x27
    218a:	98 a7       	std	Y+40, r25	; 0x28
    218c:	a9 a7       	std	Y+41, r26	; 0x29
    218e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	6f a1       	ldd	r22, Y+39	; 0x27
    2192:	78 a5       	ldd	r23, Y+40	; 0x28
    2194:	89 a5       	ldd	r24, Y+41	; 0x29
    2196:	9a a5       	ldd	r25, Y+42	; 0x2a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a e7       	ldi	r20, 0x7A	; 122
    219e:	53 e4       	ldi	r21, 0x43	; 67
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8b a3       	std	Y+35, r24	; 0x23
    21aa:	9c a3       	std	Y+36, r25	; 0x24
    21ac:	ad a3       	std	Y+37, r26	; 0x25
    21ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <main+0xde8>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9a a3       	std	Y+34, r25	; 0x22
    21ce:	89 a3       	std	Y+33, r24	; 0x21
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <main+0xe66>
	else if (__tmp > 65535)
    21d2:	6b a1       	ldd	r22, Y+35	; 0x23
    21d4:	7c a1       	ldd	r23, Y+36	; 0x24
    21d6:	8d a1       	ldd	r24, Y+37	; 0x25
    21d8:	9e a1       	ldd	r25, Y+38	; 0x26
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <main+0xe52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	6f a1       	ldd	r22, Y+39	; 0x27
    21ec:	78 a5       	ldd	r23, Y+40	; 0x28
    21ee:	89 a5       	ldd	r24, Y+41	; 0x29
    21f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9a a3       	std	Y+34, r25	; 0x22
    2210:	89 a3       	std	Y+33, r24	; 0x21
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <main+0xe48>
    2214:	89 e1       	ldi	r24, 0x19	; 25
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	98 a3       	std	Y+32, r25	; 0x20
    221a:	8f 8f       	std	Y+31, r24	; 0x1f
    221c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    221e:	98 a1       	ldd	r25, Y+32	; 0x20
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <main+0xe36>
    2224:	98 a3       	std	Y+32, r25	; 0x20
    2226:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	89 a1       	ldd	r24, Y+33	; 0x21
    222a:	9a a1       	ldd	r25, Y+34	; 0x22
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9a a3       	std	Y+34, r25	; 0x22
    2230:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	89 a1       	ldd	r24, Y+33	; 0x21
    2234:	9a a1       	ldd	r25, Y+34	; 0x22
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <main+0xe2a>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <main+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6b a1       	ldd	r22, Y+35	; 0x23
    223e:	7c a1       	ldd	r23, Y+36	; 0x24
    2240:	8d a1       	ldd	r24, Y+37	; 0x25
    2242:	9e a1       	ldd	r25, Y+38	; 0x26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9a a3       	std	Y+34, r25	; 0x22
    224e:	89 a3       	std	Y+33, r24	; 0x21
    2250:	89 a1       	ldd	r24, Y+33	; 0x21
    2252:	9a a1       	ldd	r25, Y+34	; 0x22
    2254:	9e 8f       	std	Y+30, r25	; 0x1e
    2256:	8d 8f       	std	Y+29, r24	; 0x1d
    2258:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <main+0xe72>
    2260:	9e 8f       	std	Y+30, r25	; 0x1e
    2262:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(4000);
					LCD_clearScreen();
    2264:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
			/*
			 *  return the state of danger mode to the default after restart the
			 *  program from first again, to keep the chances to enter the password
			 *  maximum times and to give the chance to enable thief mode again
			 */
			danger_error = NO_DANGER;
    2268:	fe 01       	movw	r30, r28
    226a:	e2 57       	subi	r30, 0x72	; 114
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	10 82       	st	Z, r1
    2270:	91 c1       	rjmp	.+802    	; 0x2594 <main+0x11aa>
		 *****************************************************************************************/
		/*
		 * option to change the password if the selected
		 * option is second choice
		 */
		else if(decision == CHOICE_2)
    2272:	fe 01       	movw	r30, r28
    2274:	e1 57       	subi	r30, 0x71	; 113
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	82 30       	cpi	r24, 0x02	; 2
    227c:	09 f0       	breq	.+2      	; 0x2280 <main+0xe96>
    227e:	8a c1       	rjmp	.+788    	; 0x2594 <main+0x11aa>
		{
			/*
			 * send the choice byte to the control ECU
			 * to make him ready for tasks of this choice
			 */
			while(UART_recieveByte() != ECU_READY){}
    2280:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    2284:	80 31       	cpi	r24, 0x10	; 16
    2286:	e1 f7       	brne	.-8      	; 0x2280 <main+0xe96>
			UART_sendByte(decision);
    2288:	fe 01       	movw	r30, r28
    228a:	e1 57       	subi	r30, 0x71	; 113
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
				 * Before enable user to change the password ask him first
				 * to enter the stored password to compare it with the
				 * original password
				 */

				store_Password(g_password2);
    2294:	80 ed       	ldi	r24, 0xD0	; 208
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	0e 94 92 06 	call	0xd24	; 0xd24 <store_Password>

				/*
				 * send the entered password to control ECU to
				 * check if it equals to the original password or not
				 */
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    229c:	fe 01       	movw	r30, r28
    229e:	ef 56       	subi	r30, 0x6F	; 111
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	10 82       	st	Z, r1
    22a4:	8b c0       	rjmp	.+278    	; 0x23bc <main+0xfd2>
				{
					/*
					 * wait for the control ECU to be ready to
					 * send the password to it byte by byte using UART
					 */
					while(UART_recieveByte() != ECU_READY){}
    22a6:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    22aa:	80 31       	cpi	r24, 0x10	; 16
    22ac:	e1 f7       	brne	.-8      	; 0x22a6 <main+0xebc>
					UART_sendByte(g_password2[counter]);
    22ae:	fe 01       	movw	r30, r28
    22b0:	ef 56       	subi	r30, 0x6F	; 111
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	fc 01       	movw	r30, r24
    22bc:	e0 53       	subi	r30, 0x30	; 48
    22be:	fe 4f       	sbci	r31, 0xFE	; 254
    22c0:	80 81       	ld	r24, Z
    22c2:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 ea       	ldi	r26, 0xA0	; 160
    22cc:	b2 e4       	ldi	r27, 0x42	; 66
    22ce:	89 8f       	std	Y+25, r24	; 0x19
    22d0:	9a 8f       	std	Y+26, r25	; 0x1a
    22d2:	ab 8f       	std	Y+27, r26	; 0x1b
    22d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	69 8d       	ldd	r22, Y+25	; 0x19
    22d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a e7       	ldi	r20, 0x7A	; 122
    22e4:	53 e4       	ldi	r21, 0x43	; 67
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8d 8b       	std	Y+21, r24	; 0x15
    22f0:	9e 8b       	std	Y+22, r25	; 0x16
    22f2:	af 8b       	std	Y+23, r26	; 0x17
    22f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <main+0xf2e>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9c 8b       	std	Y+20, r25	; 0x14
    2314:	8b 8b       	std	Y+19, r24	; 0x13
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <main+0xfac>
	else if (__tmp > 65535)
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <main+0xf98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	69 8d       	ldd	r22, Y+25	; 0x19
    2332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9c 8b       	std	Y+20, r25	; 0x14
    2356:	8b 8b       	std	Y+19, r24	; 0x13
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <main+0xf8e>
    235a:	89 e1       	ldi	r24, 0x19	; 25
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9a 8b       	std	Y+18, r25	; 0x12
    2360:	89 8b       	std	Y+17, r24	; 0x11
    2362:	89 89       	ldd	r24, Y+17	; 0x11
    2364:	9a 89       	ldd	r25, Y+18	; 0x12
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <main+0xf7c>
    236a:	9a 8b       	std	Y+18, r25	; 0x12
    236c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	8b 89       	ldd	r24, Y+19	; 0x13
    2370:	9c 89       	ldd	r25, Y+20	; 0x14
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9c 8b       	std	Y+20, r25	; 0x14
    2376:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	8b 89       	ldd	r24, Y+19	; 0x13
    237a:	9c 89       	ldd	r25, Y+20	; 0x14
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <main+0xf70>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <main+0xfc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	6d 89       	ldd	r22, Y+21	; 0x15
    2384:	7e 89       	ldd	r23, Y+22	; 0x16
    2386:	8f 89       	ldd	r24, Y+23	; 0x17
    2388:	98 8d       	ldd	r25, Y+24	; 0x18
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	98 8b       	std	Y+16, r25	; 0x10
    239c:	8f 87       	std	Y+15, r24	; 0x0f
    239e:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a0:	98 89       	ldd	r25, Y+16	; 0x10
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <main+0xfb8>
    23a6:	98 8b       	std	Y+16, r25	; 0x10
    23a8:	8f 87       	std	Y+15, r24	; 0x0f

				/*
				 * send the entered password to control ECU to
				 * check if it equals to the original password or not
				 */
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    23aa:	de 01       	movw	r26, r28
    23ac:	af 56       	subi	r26, 0x6F	; 111
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	ef 56       	subi	r30, 0x6F	; 111
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	8c 93       	st	X, r24
    23bc:	fe 01       	movw	r30, r28
    23be:	ef 56       	subi	r30, 0x6F	; 111
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	85 30       	cpi	r24, 0x05	; 5
    23c6:	08 f4       	brcc	.+2      	; 0x23ca <main+0xfe0>
    23c8:	6e cf       	rjmp	.-292    	; 0x22a6 <main+0xebc>
				/*
				 * after sending the password to control ECU
				 * wait until Control ECU send byte that if the entered password matches original
				 *  or not, and told it that HMI ECU is ready to receive the byte
				 */
				UART_sendByte(ECU_READY);
    23ca:	80 e1       	ldi	r24, 0x10	; 16
    23cc:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
				/*
				 *store the received byte in local variable check_EEPROM
				 */
				check_EEPROM = UART_recieveByte();
    23d0:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e0 57       	subi	r30, 0x70	; 112
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 83       	st	Z, r24

				/*
				 *if the message from the control ECU tell HMI that
				 * there is mismatch between two entered passwords
				 */
				if(check_EEPROM == MISMATCH)
    23dc:	fe 01       	movw	r30, r28
    23de:	e0 57       	subi	r30, 0x70	; 112
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	09 f0       	breq	.+2      	; 0x23ea <main+0x1000>
    23e8:	ad c0       	rjmp	.+346    	; 0x2544 <main+0x115a>
					 *   3-force arrow of the LCD to go to the second line
					 *   4-display message to ask him to "TRY AGAIN!"
					 *   5-keep the message on the screen for 3 seconds
					 */

					LCD_clearScreen();
    23ea:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Sorry Invalid Pass ");
    23ee:	2d e8       	ldi	r18, 0x8D	; 141
    23f0:	31 e0       	ldi	r19, 0x01	; 1
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	a9 01       	movw	r20, r18
    23f8:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
					LCD_goToRowColumn(1,0);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
					LCD_displayStringRowColumn(1,0,"TRY AGAIN!");
    2404:	21 ea       	ldi	r18, 0xA1	; 161
    2406:	31 e0       	ldi	r19, 0x01	; 1
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	a9 01       	movw	r20, r18
    240e:	0e 94 4b 18 	call	0x3096	; 0x3096 <LCD_displayStringRowColumn>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e8       	ldi	r25, 0x80	; 128
    2416:	ab e3       	ldi	r26, 0x3B	; 59
    2418:	b5 e4       	ldi	r27, 0x45	; 69
    241a:	8b 87       	std	Y+11, r24	; 0x0b
    241c:	9c 87       	std	Y+12, r25	; 0x0c
    241e:	ad 87       	std	Y+13, r26	; 0x0d
    2420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6b 85       	ldd	r22, Y+11	; 0x0b
    2424:	7c 85       	ldd	r23, Y+12	; 0x0c
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a e7       	ldi	r20, 0x7A	; 122
    2430:	53 e4       	ldi	r21, 0x43	; 67
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8f 83       	std	Y+7, r24	; 0x07
    243c:	98 87       	std	Y+8, r25	; 0x08
    243e:	a9 87       	std	Y+9, r26	; 0x09
    2440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <main+0x107a>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <main+0x10f8>
	else if (__tmp > 65535)
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <main+0x10e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6b 85       	ldd	r22, Y+11	; 0x0b
    247e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2480:	8d 85       	ldd	r24, Y+13	; 0x0d
    2482:	9e 85       	ldd	r25, Y+14	; 0x0e
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <main+0x10da>
    24a6:	89 e1       	ldi	r24, 0x19	; 25
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <main+0x10c8>
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <main+0x10bc>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <main+0x110c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <main+0x1104>
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01

					/*
					 *increment the danger_error to be indicator for number of
					 *valid tries to let the user be able to enter the pass
					 */
					danger_error++;
    24f6:	de 01       	movw	r26, r28
    24f8:	a2 57       	subi	r26, 0x72	; 114
    24fa:	bf 4f       	sbci	r27, 0xFF	; 255
    24fc:	fe 01       	movw	r30, r28
    24fe:	e2 57       	subi	r30, 0x72	; 114
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	8c 93       	st	X, r24

					/******************************************************************************************
					 *                                THIEF MODE in STAGE (4-1)
					 *****************************************************************************************/

					if(danger_error == ALLOWED_TRIES_TO_ENTER_PASSWORD)
    2508:	fe 01       	movw	r30, r28
    250a:	e2 57       	subi	r30, 0x72	; 114
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	80 81       	ld	r24, Z
    2510:	83 30       	cpi	r24, 0x03	; 3
    2512:	c1 f4       	brne	.+48     	; 0x2544 <main+0x115a>
						/*
						 * call the function Timer_setCallBack and give it
						 * the address of function timerdanger to force the timer ISR
						 * to call this function every interrupt occur, "every one second"
						 */
						Timer_setCallBack(timerDanger, Timer1);
    2514:	85 ec       	ldi	r24, 0xC5	; 197
    2516:	99 e0       	ldi	r25, 0x09	; 9
    2518:	61 e0       	ldi	r22, 0x01	; 1
    251a:	0e 94 4f 1c 	call	0x389e	; 0x389e <Timer_setCallBack>

						/*
						 * call the function of LCD clear screen to be ready
						 * for the called function will display on LCD
						 */
						LCD_clearScreen();
    251e:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_clearScreen>
						 * Start the timer to count
						 * give it the address of the declared structure
						 * to put its values in the initialization function
						 * in the entire registers of the timer
						 */
						Timer_init(&timer);
    2522:	ce 01       	movw	r24, r28
    2524:	8c 56       	subi	r24, 0x6C	; 108
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	0e 94 c3 19 	call	0x3386	; 0x3386 <Timer_init>
						/*
						 *pooling to hold the whole program until the thief event finished
						 * to make all peripherals keyPad , LCD pooled with no work
						 * until the action of Buzzer ends successfully
						 */
						while(g_holdSystem != RESUME_SYSTEM){}
    252c:	80 91 b4 01 	lds	r24, 0x01B4
    2530:	88 23       	and	r24, r24
    2532:	e1 f7       	brne	.-8      	; 0x252c <main+0x1142>
						/*
						 * return the state of the g_holdSystem to be hold again
						 * after being RESUME to be ready for any required
						 * action to hold the system again
						 */
						g_holdSystem = HOLD_SYSTEM;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	80 93 b4 01 	sts	0x01B4, r24
						/*
						 * change the state of the restart main program to TRUE state
						 * to terminate from the while loop and make
						 * the force the program to start from the basic options
						 */
						restart_mainProgram = TRUE;
    253a:	fe 01       	movw	r30, r28
    253c:	e3 57       	subi	r30, 0x73	; 115
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	80 83       	st	Z, r24
				/*
				 * to continue repeating the same steps if the entered password NOT
				 * matches the original password and the state to restart
				 * the program is false
				 */
			}while( (check_EEPROM ==  MISMATCH) && (restart_mainProgram == FALSE) );
    2544:	fe 01       	movw	r30, r28
    2546:	e0 57       	subi	r30, 0x70	; 112
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	39 f4       	brne	.+14     	; 0x255e <main+0x1174>
    2550:	fe 01       	movw	r30, r28
    2552:	e3 57       	subi	r30, 0x73	; 115
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	88 23       	and	r24, r24
    255a:	09 f4       	brne	.+2      	; 0x255e <main+0x1174>
    255c:	9b ce       	rjmp	.-714    	; 0x2294 <main+0xeaa>
			 *****************************************************************************************/
			/*
			 *if the message from the control ECU tell HMI that
			 * there is NO mismatch between two entered passwords
			 */
			if (check_EEPROM == MATCH)
    255e:	fe 01       	movw	r30, r28
    2560:	e0 57       	subi	r30, 0x70	; 112
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	88 23       	and	r24, r24
    2568:	89 f4       	brne	.+34     	; 0x258c <main+0x11a2>
				/*
				 * call the function Timer_setCallBack and give it
				 * the address of function timerMoving_Clockwise to force the timer ISR
				 * to call this function every interrupt occur, "every one second"
				 */
				Timer_setCallBack(timerMoving_Clockwise, Timer1);
    256a:	85 e9       	ldi	r24, 0x95	; 149
    256c:	99 e0       	ldi	r25, 0x09	; 9
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	0e 94 4f 1c 	call	0x389e	; 0x389e <Timer_setCallBack>
				 * Start the timer to count
				 * give it the address of the declared structure
				 * to put its values in the initialization function
				 * in the entire registers of the timer
				 */
				Timer_init(&timer);
    2574:	ce 01       	movw	r24, r28
    2576:	8c 56       	subi	r24, 0x6C	; 108
    2578:	9f 4f       	sbci	r25, 0xFF	; 255
    257a:	0e 94 c3 19 	call	0x3386	; 0x3386 <Timer_init>
				/*
				 *pooling to hold the whole program until the thief event finished
				 * to make all peripherals keyPad , LCD pooled with no work
				 * until the action of Buzzer ends successfully
				 */
				while(g_holdSystem != RESUME_SYSTEM){}
    257e:	80 91 b4 01 	lds	r24, 0x01B4
    2582:	88 23       	and	r24, r24
    2584:	e1 f7       	brne	.-8      	; 0x257e <main+0x1194>
				/*
				 * return the state of the g_holdSystem to be hold again
				 * after being RESUME to be ready for any required
				 * action to hold the system again
				 */
				g_holdSystem = HOLD_SYSTEM;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	80 93 b4 01 	sts	0x01B4, r24
			/*
			 *  return the state of danger mode to the default after restart the
			 *  program from first again, to keep the chances to enter the password
			 *  maximum times and to give the chance to enable thief mode again
			 */
			danger_error = NO_DANGER;
    258c:	fe 01       	movw	r30, r28
    258e:	e2 57       	subi	r30, 0x72	; 114
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	10 82       	st	Z, r1
		/*
		 * return the state of restart to the default value to
		 * allow the while continue in while loop if there
		 * is error in entered password
		 */
		restart_mainProgram = FALSE;
    2594:	fe 01       	movw	r30, r28
    2596:	e3 57       	subi	r30, 0x73	; 115
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	10 82       	st	Z, r1
    259c:	86 ca       	rjmp	.-2804   	; 0x1aaa <main+0x6c0>

0000259e <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <KeyPad_getPressedKey+0x6>
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    25a8:	1a 82       	std	Y+2, r1	; 0x02
    25aa:	4c c0       	rjmp	.+152    	; 0x2644 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    25ac:	ea e3       	ldi	r30, 0x3A	; 58
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	80 e1       	ldi	r24, 0x10	; 16
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <KeyPad_getPressedKey+0x22>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	2a 95       	dec	r18
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <KeyPad_getPressedKey+0x1e>
    25c4:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    25c6:	eb e3       	ldi	r30, 0x3B	; 59
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	80 e1       	ldi	r24, 0x10	; 16
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	02 2e       	mov	r0, r18
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <KeyPad_getPressedKey+0x3e>
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	0a 94       	dec	r0
    25de:	e2 f7       	brpl	.-8      	; 0x25d8 <KeyPad_getPressedKey+0x3a>
    25e0:	80 95       	com	r24
    25e2:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    25e4:	19 82       	std	Y+1, r1	; 0x01
    25e6:	28 c0       	rjmp	.+80     	; 0x2638 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    25e8:	e9 e3       	ldi	r30, 0x39	; 57
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a9 01       	movw	r20, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <KeyPad_getPressedKey+0x62>
    25fc:	55 95       	asr	r21
    25fe:	47 95       	ror	r20
    2600:	8a 95       	dec	r24
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <KeyPad_getPressedKey+0x5e>
    2604:	ca 01       	movw	r24, r20
    2606:	81 70       	andi	r24, 0x01	; 1
    2608:	90 70       	andi	r25, 0x00	; 0
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	91 f4       	brne	.+36     	; 0x2632 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	98 2f       	mov	r25, r24
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	89 0f       	add	r24, r25
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	0e 94 27 13 	call	0x264e	; 0x264e <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	a8 f2       	brcs	.-86     	; 0x25e8 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	8a 83       	std	Y+2, r24	; 0x02
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	84 30       	cpi	r24, 0x04	; 4
    2648:	08 f4       	brcc	.+2      	; 0x264c <KeyPad_getPressedKey+0xae>
    264a:	b0 cf       	rjmp	.-160    	; 0x25ac <KeyPad_getPressedKey+0xe>
    264c:	ad cf       	rjmp	.-166    	; 0x25a8 <KeyPad_getPressedKey+0xa>

0000264e <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <KeyPad_4x4_adjustKeyNumber+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <KeyPad_4x4_adjustKeyNumber+0x8>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3c 83       	std	Y+4, r19	; 0x04
    2664:	2b 83       	std	Y+3, r18	; 0x03
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	88 30       	cpi	r24, 0x08	; 8
    266c:	91 05       	cpc	r25, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <KeyPad_4x4_adjustKeyNumber+0x24>
    2670:	70 c0       	rjmp	.+224    	; 0x2752 <KeyPad_4x4_adjustKeyNumber+0x104>
    2672:	2b 81       	ldd	r18, Y+3	; 0x03
    2674:	3c 81       	ldd	r19, Y+4	; 0x04
    2676:	29 30       	cpi	r18, 0x09	; 9
    2678:	31 05       	cpc	r19, r1
    267a:	5c f5       	brge	.+86     	; 0x26d2 <KeyPad_4x4_adjustKeyNumber+0x84>
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	84 30       	cpi	r24, 0x04	; 4
    2682:	91 05       	cpc	r25, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2686:	59 c0       	rjmp	.+178    	; 0x273a <KeyPad_4x4_adjustKeyNumber+0xec>
    2688:	2b 81       	ldd	r18, Y+3	; 0x03
    268a:	3c 81       	ldd	r19, Y+4	; 0x04
    268c:	25 30       	cpi	r18, 0x05	; 5
    268e:	31 05       	cpc	r19, r1
    2690:	9c f4       	brge	.+38     	; 0x26b8 <KeyPad_4x4_adjustKeyNumber+0x6a>
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	91 05       	cpc	r25, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <KeyPad_4x4_adjustKeyNumber+0x50>
    269c:	48 c0       	rjmp	.+144    	; 0x272e <KeyPad_4x4_adjustKeyNumber+0xe0>
    269e:	2b 81       	ldd	r18, Y+3	; 0x03
    26a0:	3c 81       	ldd	r19, Y+4	; 0x04
    26a2:	23 30       	cpi	r18, 0x03	; 3
    26a4:	31 05       	cpc	r19, r1
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <KeyPad_4x4_adjustKeyNumber+0x5c>
    26a8:	45 c0       	rjmp	.+138    	; 0x2734 <KeyPad_4x4_adjustKeyNumber+0xe6>
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <KeyPad_4x4_adjustKeyNumber+0x68>
    26b4:	39 c0       	rjmp	.+114    	; 0x2728 <KeyPad_4x4_adjustKeyNumber+0xda>
    26b6:	67 c0       	rjmp	.+206    	; 0x2786 <KeyPad_4x4_adjustKeyNumber+0x138>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	26 30       	cpi	r18, 0x06	; 6
    26be:	31 05       	cpc	r19, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <KeyPad_4x4_adjustKeyNumber+0x76>
    26c2:	41 c0       	rjmp	.+130    	; 0x2746 <KeyPad_4x4_adjustKeyNumber+0xf8>
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	87 30       	cpi	r24, 0x07	; 7
    26ca:	91 05       	cpc	r25, r1
    26cc:	0c f0       	brlt	.+2      	; 0x26d0 <KeyPad_4x4_adjustKeyNumber+0x82>
    26ce:	3e c0       	rjmp	.+124    	; 0x274c <KeyPad_4x4_adjustKeyNumber+0xfe>
    26d0:	37 c0       	rjmp	.+110    	; 0x2740 <KeyPad_4x4_adjustKeyNumber+0xf2>
    26d2:	2b 81       	ldd	r18, Y+3	; 0x03
    26d4:	3c 81       	ldd	r19, Y+4	; 0x04
    26d6:	2c 30       	cpi	r18, 0x0C	; 12
    26d8:	31 05       	cpc	r19, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <KeyPad_4x4_adjustKeyNumber+0x90>
    26dc:	46 c0       	rjmp	.+140    	; 0x276a <KeyPad_4x4_adjustKeyNumber+0x11c>
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	8d 30       	cpi	r24, 0x0D	; 13
    26e4:	91 05       	cpc	r25, r1
    26e6:	5c f4       	brge	.+22     	; 0x26fe <KeyPad_4x4_adjustKeyNumber+0xb0>
    26e8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ea:	3c 81       	ldd	r19, Y+4	; 0x04
    26ec:	2a 30       	cpi	r18, 0x0A	; 10
    26ee:	31 05       	cpc	r19, r1
    26f0:	b1 f1       	breq	.+108    	; 0x275e <KeyPad_4x4_adjustKeyNumber+0x110>
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	8b 30       	cpi	r24, 0x0B	; 11
    26f8:	91 05       	cpc	r25, r1
    26fa:	a4 f5       	brge	.+104    	; 0x2764 <KeyPad_4x4_adjustKeyNumber+0x116>
    26fc:	2d c0       	rjmp	.+90     	; 0x2758 <KeyPad_4x4_adjustKeyNumber+0x10a>
    26fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2700:	3c 81       	ldd	r19, Y+4	; 0x04
    2702:	2e 30       	cpi	r18, 0x0E	; 14
    2704:	31 05       	cpc	r19, r1
    2706:	b9 f1       	breq	.+110    	; 0x2776 <KeyPad_4x4_adjustKeyNumber+0x128>
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	8e 30       	cpi	r24, 0x0E	; 14
    270e:	91 05       	cpc	r25, r1
    2710:	7c f1       	brlt	.+94     	; 0x2770 <KeyPad_4x4_adjustKeyNumber+0x122>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	2f 30       	cpi	r18, 0x0F	; 15
    2718:	31 05       	cpc	r19, r1
    271a:	79 f1       	breq	.+94     	; 0x277a <KeyPad_4x4_adjustKeyNumber+0x12c>
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	80 31       	cpi	r24, 0x10	; 16
    2722:	91 05       	cpc	r25, r1
    2724:	69 f1       	breq	.+90     	; 0x2780 <KeyPad_4x4_adjustKeyNumber+0x132>
    2726:	2f c0       	rjmp	.+94     	; 0x2786 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    2728:	97 e0       	ldi	r25, 0x07	; 7
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	2e c0       	rjmp	.+92     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    272e:	28 e0       	ldi	r18, 0x08	; 8
    2730:	2a 83       	std	Y+2, r18	; 0x02
    2732:	2b c0       	rjmp	.+86     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    2734:	39 e0       	ldi	r19, 0x09	; 9
    2736:	3a 83       	std	Y+2, r19	; 0x02
    2738:	28 c0       	rjmp	.+80     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    273a:	85 e2       	ldi	r24, 0x25	; 37
    273c:	8a 83       	std	Y+2, r24	; 0x02
    273e:	25 c0       	rjmp	.+74     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    2740:	94 e0       	ldi	r25, 0x04	; 4
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	22 c0       	rjmp	.+68     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    2746:	25 e0       	ldi	r18, 0x05	; 5
    2748:	2a 83       	std	Y+2, r18	; 0x02
    274a:	1f c0       	rjmp	.+62     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    274c:	36 e0       	ldi	r19, 0x06	; 6
    274e:	3a 83       	std	Y+2, r19	; 0x02
    2750:	1c c0       	rjmp	.+56     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2752:	8a e2       	ldi	r24, 0x2A	; 42
    2754:	8a 83       	std	Y+2, r24	; 0x02
    2756:	19 c0       	rjmp	.+50     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	16 c0       	rjmp	.+44     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    275e:	22 e0       	ldi	r18, 0x02	; 2
    2760:	2a 83       	std	Y+2, r18	; 0x02
    2762:	13 c0       	rjmp	.+38     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    2764:	33 e0       	ldi	r19, 0x03	; 3
    2766:	3a 83       	std	Y+2, r19	; 0x02
    2768:	10 c0       	rjmp	.+32     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    276a:	8d e2       	ldi	r24, 0x2D	; 45
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	0d c0       	rjmp	.+26     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2770:	9d e0       	ldi	r25, 0x0D	; 13
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	0a c0       	rjmp	.+20     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    2776:	1a 82       	std	Y+2, r1	; 0x02
    2778:	08 c0       	rjmp	.+16     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    277a:	2d e3       	ldi	r18, 0x3D	; 61
    277c:	2a 83       	std	Y+2, r18	; 0x02
    277e:	05 c0       	rjmp	.+10     	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2780:	3b e2       	ldi	r19, 0x2B	; 43
    2782:	3a 83       	std	Y+2, r19	; 0x02
    2784:	02 c0       	rjmp	.+4      	; 0x278a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	8a 83       	std	Y+2, r24	; 0x02
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    27a2:	e4 e3       	ldi	r30, 0x34	; 52
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    27aa:	a7 e3       	ldi	r26, 0x37	; 55
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e7 e3       	ldi	r30, 0x37	; 55
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	80 6e       	ori	r24, 0xE0	; 224
    27b6:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    27b8:	88 e3       	ldi	r24, 0x38	; 56
    27ba:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    27be:	8c e0       	ldi	r24, 0x0C	; 12
    27c0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_sendCommand>
}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	e9 97       	sbiw	r28, 0x39	; 57
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    27e6:	a8 e3       	ldi	r26, 0x38	; 56
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e8 e3       	ldi	r30, 0x38	; 56
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 7d       	andi	r24, 0xDF	; 223
    27f2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    27f4:	a8 e3       	ldi	r26, 0x38	; 56
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e8 e3       	ldi	r30, 0x38	; 56
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	8f 7b       	andi	r24, 0xBF	; 191
    2800:	8c 93       	st	X, r24
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a0 e8       	ldi	r26, 0x80	; 128
    2808:	bf e3       	ldi	r27, 0x3F	; 63
    280a:	8d ab       	std	Y+53, r24	; 0x35
    280c:	9e ab       	std	Y+54, r25	; 0x36
    280e:	af ab       	std	Y+55, r26	; 0x37
    2810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	6d a9       	ldd	r22, Y+53	; 0x35
    2814:	7e a9       	ldd	r23, Y+54	; 0x36
    2816:	8f a9       	ldd	r24, Y+55	; 0x37
    2818:	98 ad       	ldd	r25, Y+56	; 0x38
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a e7       	ldi	r20, 0x7A	; 122
    2820:	53 e4       	ldi	r21, 0x43	; 67
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	89 ab       	std	Y+49, r24	; 0x31
    282c:	9a ab       	std	Y+50, r25	; 0x32
    282e:	ab ab       	std	Y+51, r26	; 0x33
    2830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2832:	69 a9       	ldd	r22, Y+49	; 0x31
    2834:	7a a9       	ldd	r23, Y+50	; 0x32
    2836:	8b a9       	ldd	r24, Y+51	; 0x33
    2838:	9c a9       	ldd	r25, Y+52	; 0x34
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <LCD_sendCommand+0x84>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	98 ab       	std	Y+48, r25	; 0x30
    2850:	8f a7       	std	Y+47, r24	; 0x2f
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    2854:	69 a9       	ldd	r22, Y+49	; 0x31
    2856:	7a a9       	ldd	r23, Y+50	; 0x32
    2858:	8b a9       	ldd	r24, Y+51	; 0x33
    285a:	9c a9       	ldd	r25, Y+52	; 0x34
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	6d a9       	ldd	r22, Y+53	; 0x35
    286e:	7e a9       	ldd	r23, Y+54	; 0x36
    2870:	8f a9       	ldd	r24, Y+55	; 0x37
    2872:	98 ad       	ldd	r25, Y+56	; 0x38
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <LCD_sendCommand+0xe4>
    2896:	89 e1       	ldi	r24, 0x19	; 25
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9e a7       	std	Y+46, r25	; 0x2e
    289c:	8d a7       	std	Y+45, r24	; 0x2d
    289e:	8d a5       	ldd	r24, Y+45	; 0x2d
    28a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_sendCommand+0xd2>
    28a6:	9e a7       	std	Y+46, r25	; 0x2e
    28a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ac:	98 a9       	ldd	r25, Y+48	; 0x30
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	98 ab       	std	Y+48, r25	; 0x30
    28b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b6:	98 a9       	ldd	r25, Y+48	; 0x30
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <LCD_sendCommand+0xc6>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	69 a9       	ldd	r22, Y+49	; 0x31
    28c0:	7a a9       	ldd	r23, Y+50	; 0x32
    28c2:	8b a9       	ldd	r24, Y+51	; 0x33
    28c4:	9c a9       	ldd	r25, Y+52	; 0x34
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	98 ab       	std	Y+48, r25	; 0x30
    28d0:	8f a7       	std	Y+47, r24	; 0x2f
    28d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d4:	98 a9       	ldd	r25, Y+48	; 0x30
    28d6:	9c a7       	std	Y+44, r25	; 0x2c
    28d8:	8b a7       	std	Y+43, r24	; 0x2b
    28da:	8b a5       	ldd	r24, Y+43	; 0x2b
    28dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_sendCommand+0x10e>
    28e2:	9c a7       	std	Y+44, r25	; 0x2c
    28e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    28e6:	a8 e3       	ldi	r26, 0x38	; 56
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e8 e3       	ldi	r30, 0x38	; 56
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	80 68       	ori	r24, 0x80	; 128
    28f2:	8c 93       	st	X, r24
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e8       	ldi	r26, 0x80	; 128
    28fa:	bf e3       	ldi	r27, 0x3F	; 63
    28fc:	8f a3       	std	Y+39, r24	; 0x27
    28fe:	98 a7       	std	Y+40, r25	; 0x28
    2900:	a9 a7       	std	Y+41, r26	; 0x29
    2902:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6f a1       	ldd	r22, Y+39	; 0x27
    2906:	78 a5       	ldd	r23, Y+40	; 0x28
    2908:	89 a5       	ldd	r24, Y+41	; 0x29
    290a:	9a a5       	ldd	r25, Y+42	; 0x2a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	53 e4       	ldi	r21, 0x43	; 67
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8b a3       	std	Y+35, r24	; 0x23
    291e:	9c a3       	std	Y+36, r25	; 0x24
    2920:	ad a3       	std	Y+37, r26	; 0x25
    2922:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2924:	6b a1       	ldd	r22, Y+35	; 0x23
    2926:	7c a1       	ldd	r23, Y+36	; 0x24
    2928:	8d a1       	ldd	r24, Y+37	; 0x25
    292a:	9e a1       	ldd	r25, Y+38	; 0x26
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <LCD_sendCommand+0x176>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9a a3       	std	Y+34, r25	; 0x22
    2942:	89 a3       	std	Y+33, r24	; 0x21
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    2946:	6b a1       	ldd	r22, Y+35	; 0x23
    2948:	7c a1       	ldd	r23, Y+36	; 0x24
    294a:	8d a1       	ldd	r24, Y+37	; 0x25
    294c:	9e a1       	ldd	r25, Y+38	; 0x26
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6f a1       	ldd	r22, Y+39	; 0x27
    2960:	78 a5       	ldd	r23, Y+40	; 0x28
    2962:	89 a5       	ldd	r24, Y+41	; 0x29
    2964:	9a a5       	ldd	r25, Y+42	; 0x2a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9a a3       	std	Y+34, r25	; 0x22
    2984:	89 a3       	std	Y+33, r24	; 0x21
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <LCD_sendCommand+0x1d6>
    2988:	89 e1       	ldi	r24, 0x19	; 25
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	98 a3       	std	Y+32, r25	; 0x20
    298e:	8f 8f       	std	Y+31, r24	; 0x1f
    2990:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2992:	98 a1       	ldd	r25, Y+32	; 0x20
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_sendCommand+0x1c4>
    2998:	98 a3       	std	Y+32, r25	; 0x20
    299a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	89 a1       	ldd	r24, Y+33	; 0x21
    299e:	9a a1       	ldd	r25, Y+34	; 0x22
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9a a3       	std	Y+34, r25	; 0x22
    29a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	89 a1       	ldd	r24, Y+33	; 0x21
    29a8:	9a a1       	ldd	r25, Y+34	; 0x22
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <LCD_sendCommand+0x1b8>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6b a1       	ldd	r22, Y+35	; 0x23
    29b2:	7c a1       	ldd	r23, Y+36	; 0x24
    29b4:	8d a1       	ldd	r24, Y+37	; 0x25
    29b6:	9e a1       	ldd	r25, Y+38	; 0x26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9a a3       	std	Y+34, r25	; 0x22
    29c2:	89 a3       	std	Y+33, r24	; 0x21
    29c4:	89 a1       	ldd	r24, Y+33	; 0x21
    29c6:	9a a1       	ldd	r25, Y+34	; 0x22
    29c8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ca:	8d 8f       	std	Y+29, r24	; 0x1d
    29cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <LCD_sendCommand+0x200>
    29d4:	9e 8f       	std	Y+30, r25	; 0x1e
    29d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    29d8:	e5 e3       	ldi	r30, 0x35	; 53
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	89 ad       	ldd	r24, Y+57	; 0x39
    29de:	80 83       	st	Z, r24
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e8       	ldi	r26, 0x80	; 128
    29e6:	bf e3       	ldi	r27, 0x3F	; 63
    29e8:	89 8f       	std	Y+25, r24	; 0x19
    29ea:	9a 8f       	std	Y+26, r25	; 0x1a
    29ec:	ab 8f       	std	Y+27, r26	; 0x1b
    29ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	69 8d       	ldd	r22, Y+25	; 0x19
    29f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a e7       	ldi	r20, 0x7A	; 122
    29fe:	53 e4       	ldi	r21, 0x43	; 67
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8d 8b       	std	Y+21, r24	; 0x15
    2a0a:	9e 8b       	std	Y+22, r25	; 0x16
    2a0c:	af 8b       	std	Y+23, r26	; 0x17
    2a0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a10:	6d 89       	ldd	r22, Y+21	; 0x15
    2a12:	7e 89       	ldd	r23, Y+22	; 0x16
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_sendCommand+0x262>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9c 8b       	std	Y+20, r25	; 0x14
    2a2e:	8b 8b       	std	Y+19, r24	; 0x13
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    2a32:	6d 89       	ldd	r22, Y+21	; 0x15
    2a34:	7e 89       	ldd	r23, Y+22	; 0x16
    2a36:	8f 89       	ldd	r24, Y+23	; 0x17
    2a38:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9c 8b       	std	Y+20, r25	; 0x14
    2a70:	8b 8b       	std	Y+19, r24	; 0x13
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_sendCommand+0x2c2>
    2a74:	89 e1       	ldi	r24, 0x19	; 25
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9a 8b       	std	Y+18, r25	; 0x12
    2a7a:	89 8b       	std	Y+17, r24	; 0x11
    2a7c:	89 89       	ldd	r24, Y+17	; 0x11
    2a7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_sendCommand+0x2b0>
    2a84:	9a 8b       	std	Y+18, r25	; 0x12
    2a86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9c 8b       	std	Y+20, r25	; 0x14
    2a90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8b 89       	ldd	r24, Y+19	; 0x13
    2a94:	9c 89       	ldd	r25, Y+20	; 0x14
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_sendCommand+0x2a4>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab4:	98 8b       	std	Y+16, r25	; 0x10
    2ab6:	8f 87       	std	Y+15, r24	; 0x0f
    2ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aba:	98 89       	ldd	r25, Y+16	; 0x10
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_sendCommand+0x2ec>
    2ac0:	98 8b       	std	Y+16, r25	; 0x10
    2ac2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2ac4:	a8 e3       	ldi	r26, 0x38	; 56
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e8 e3       	ldi	r30, 0x38	; 56
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	8f 77       	andi	r24, 0x7F	; 127
    2ad0:	8c 93       	st	X, r24
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	53 e4       	ldi	r21, 0x43	; 67
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_sendCommand+0x354>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_sendCommand+0x3b4>
    2b66:	89 e1       	ldi	r24, 0x19	; 25
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_sendCommand+0x3a2>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_sendCommand+0x396>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_sendCommand+0x3de>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2bb6:	e9 96       	adiw	r28, 0x39	; 57
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	e9 97       	sbiw	r28, 0x39	; 57
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2bde:	a8 e3       	ldi	r26, 0x38	; 56
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e8 e3       	ldi	r30, 0x38	; 56
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	80 62       	ori	r24, 0x20	; 32
    2bea:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2bec:	a8 e3       	ldi	r26, 0x38	; 56
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e8 e3       	ldi	r30, 0x38	; 56
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8f 7b       	andi	r24, 0xBF	; 191
    2bf8:	8c 93       	st	X, r24
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a0 e8       	ldi	r26, 0x80	; 128
    2c00:	bf e3       	ldi	r27, 0x3F	; 63
    2c02:	8d ab       	std	Y+53, r24	; 0x35
    2c04:	9e ab       	std	Y+54, r25	; 0x36
    2c06:	af ab       	std	Y+55, r26	; 0x37
    2c08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c10:	98 ad       	ldd	r25, Y+56	; 0x38
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4a e7       	ldi	r20, 0x7A	; 122
    2c18:	53 e4       	ldi	r21, 0x43	; 67
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	89 ab       	std	Y+49, r24	; 0x31
    2c24:	9a ab       	std	Y+50, r25	; 0x32
    2c26:	ab ab       	std	Y+51, r26	; 0x33
    2c28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c30:	9c a9       	ldd	r25, Y+52	; 0x34
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <LCD_displayCharacter+0x84>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	98 ab       	std	Y+48, r25	; 0x30
    2c48:	8f a7       	std	Y+47, r24	; 0x2f
    2c4a:	3f c0       	rjmp	.+126    	; 0x2cca <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c50:	8b a9       	ldd	r24, Y+51	; 0x33
    2c52:	9c a9       	ldd	r25, Y+52	; 0x34
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	4c f5       	brge	.+82     	; 0x2cb6 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c64:	6d a9       	ldd	r22, Y+53	; 0x35
    2c66:	7e a9       	ldd	r23, Y+54	; 0x36
    2c68:	8f a9       	ldd	r24, Y+55	; 0x37
    2c6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e2       	ldi	r20, 0x20	; 32
    2c72:	51 e4       	ldi	r21, 0x41	; 65
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	cd 01       	movw	r24, r26
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	98 ab       	std	Y+48, r25	; 0x30
    2c8a:	8f a7       	std	Y+47, r24	; 0x2f
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <LCD_displayCharacter+0xe4>
    2c8e:	89 e1       	ldi	r24, 0x19	; 25
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9e a7       	std	Y+46, r25	; 0x2e
    2c94:	8d a7       	std	Y+45, r24	; 0x2d
    2c96:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c98:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <LCD_displayCharacter+0xd2>
    2c9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ca0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	98 ab       	std	Y+48, r25	; 0x30
    2caa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cae:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	69 f7       	brne	.-38     	; 0x2c8e <LCD_displayCharacter+0xc6>
    2cb4:	14 c0       	rjmp	.+40     	; 0x2cde <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cba:	8b a9       	ldd	r24, Y+51	; 0x33
    2cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	98 ab       	std	Y+48, r25	; 0x30
    2cc8:	8f a7       	std	Y+47, r24	; 0x2f
    2cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cce:	9c a7       	std	Y+44, r25	; 0x2c
    2cd0:	8b a7       	std	Y+43, r24	; 0x2b
    2cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_displayCharacter+0x10e>
    2cda:	9c a7       	std	Y+44, r25	; 0x2c
    2cdc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2cde:	a8 e3       	ldi	r26, 0x38	; 56
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e8 e3       	ldi	r30, 0x38	; 56
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 68       	ori	r24, 0x80	; 128
    2cea:	8c 93       	st	X, r24
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 e8       	ldi	r26, 0x80	; 128
    2cf2:	bf e3       	ldi	r27, 0x3F	; 63
    2cf4:	8f a3       	std	Y+39, r24	; 0x27
    2cf6:	98 a7       	std	Y+40, r25	; 0x28
    2cf8:	a9 a7       	std	Y+41, r26	; 0x29
    2cfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2d00:	89 a5       	ldd	r24, Y+41	; 0x29
    2d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a e7       	ldi	r20, 0x7A	; 122
    2d0a:	53 e4       	ldi	r21, 0x43	; 67
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8b a3       	std	Y+35, r24	; 0x23
    2d16:	9c a3       	std	Y+36, r25	; 0x24
    2d18:	ad a3       	std	Y+37, r26	; 0x25
    2d1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d20:	8d a1       	ldd	r24, Y+37	; 0x25
    2d22:	9e a1       	ldd	r25, Y+38	; 0x26
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <LCD_displayCharacter+0x176>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9a a3       	std	Y+34, r25	; 0x22
    2d3a:	89 a3       	std	Y+33, r24	; 0x21
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d40:	7c a1       	ldd	r23, Y+36	; 0x24
    2d42:	8d a1       	ldd	r24, Y+37	; 0x25
    2d44:	9e a1       	ldd	r25, Y+38	; 0x26
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	6f a1       	ldd	r22, Y+39	; 0x27
    2d58:	78 a5       	ldd	r23, Y+40	; 0x28
    2d5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9a a3       	std	Y+34, r25	; 0x22
    2d7c:	89 a3       	std	Y+33, r24	; 0x21
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <LCD_displayCharacter+0x1d6>
    2d80:	89 e1       	ldi	r24, 0x19	; 25
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	98 a3       	std	Y+32, r25	; 0x20
    2d86:	8f 8f       	std	Y+31, r24	; 0x1f
    2d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <LCD_displayCharacter+0x1c4>
    2d90:	98 a3       	std	Y+32, r25	; 0x20
    2d92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	89 a1       	ldd	r24, Y+33	; 0x21
    2d96:	9a a1       	ldd	r25, Y+34	; 0x22
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9a a3       	std	Y+34, r25	; 0x22
    2d9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2da0:	9a a1       	ldd	r25, Y+34	; 0x22
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <LCD_displayCharacter+0x1b8>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	6b a1       	ldd	r22, Y+35	; 0x23
    2daa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dac:	8d a1       	ldd	r24, Y+37	; 0x25
    2dae:	9e a1       	ldd	r25, Y+38	; 0x26
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9a a3       	std	Y+34, r25	; 0x22
    2dba:	89 a3       	std	Y+33, r24	; 0x21
    2dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_displayCharacter+0x200>
    2dcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2dd0:	e5 e3       	ldi	r30, 0x35	; 53
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd6:	80 83       	st	Z, r24
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	a0 e8       	ldi	r26, 0x80	; 128
    2dde:	bf e3       	ldi	r27, 0x3F	; 63
    2de0:	89 8f       	std	Y+25, r24	; 0x19
    2de2:	9a 8f       	std	Y+26, r25	; 0x1a
    2de4:	ab 8f       	std	Y+27, r26	; 0x1b
    2de6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a e7       	ldi	r20, 0x7A	; 122
    2df6:	53 e4       	ldi	r21, 0x43	; 67
    2df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8d 8b       	std	Y+21, r24	; 0x15
    2e02:	9e 8b       	std	Y+22, r25	; 0x16
    2e04:	af 8b       	std	Y+23, r26	; 0x17
    2e06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e08:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <LCD_displayCharacter+0x262>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9c 8b       	std	Y+20, r25	; 0x14
    2e26:	8b 8b       	std	Y+19, r24	; 0x13
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e30:	98 8d       	ldd	r25, Y+24	; 0x18
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	69 8d       	ldd	r22, Y+25	; 0x19
    2e44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9c 8b       	std	Y+20, r25	; 0x14
    2e68:	8b 8b       	std	Y+19, r24	; 0x13
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <LCD_displayCharacter+0x2c2>
    2e6c:	89 e1       	ldi	r24, 0x19	; 25
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9a 8b       	std	Y+18, r25	; 0x12
    2e72:	89 8b       	std	Y+17, r24	; 0x11
    2e74:	89 89       	ldd	r24, Y+17	; 0x11
    2e76:	9a 89       	ldd	r25, Y+18	; 0x12
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_displayCharacter+0x2b0>
    2e7c:	9a 8b       	std	Y+18, r25	; 0x12
    2e7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	8b 89       	ldd	r24, Y+19	; 0x13
    2e82:	9c 89       	ldd	r25, Y+20	; 0x14
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9c 8b       	std	Y+20, r25	; 0x14
    2e88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <LCD_displayCharacter+0x2a4>
    2e92:	14 c0       	rjmp	.+40     	; 0x2ebc <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	6d 89       	ldd	r22, Y+21	; 0x15
    2e96:	7e 89       	ldd	r23, Y+22	; 0x16
    2e98:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	8b 8b       	std	Y+19, r24	; 0x13
    2ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2eac:	98 8b       	std	Y+16, r25	; 0x10
    2eae:	8f 87       	std	Y+15, r24	; 0x0f
    2eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb2:	98 89       	ldd	r25, Y+16	; 0x10
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <LCD_displayCharacter+0x2ec>
    2eb8:	98 8b       	std	Y+16, r25	; 0x10
    2eba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2ebc:	a8 e3       	ldi	r26, 0x38	; 56
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e8 e3       	ldi	r30, 0x38	; 56
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8f 77       	andi	r24, 0x7F	; 127
    2ec8:	8c 93       	st	X, r24
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	a0 e8       	ldi	r26, 0x80	; 128
    2ed0:	bf e3       	ldi	r27, 0x3F	; 63
    2ed2:	8b 87       	std	Y+11, r24	; 0x0b
    2ed4:	9c 87       	std	Y+12, r25	; 0x0c
    2ed6:	ad 87       	std	Y+13, r26	; 0x0d
    2ed8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	4a e7       	ldi	r20, 0x7A	; 122
    2ee8:	53 e4       	ldi	r21, 0x43	; 67
    2eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	8f 83       	std	Y+7, r24	; 0x07
    2ef4:	98 87       	std	Y+8, r25	; 0x08
    2ef6:	a9 87       	std	Y+9, r26	; 0x09
    2ef8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efa:	6f 81       	ldd	r22, Y+7	; 0x07
    2efc:	78 85       	ldd	r23, Y+8	; 0x08
    2efe:	89 85       	ldd	r24, Y+9	; 0x09
    2f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e8       	ldi	r20, 0x80	; 128
    2f08:	5f e3       	ldi	r21, 0x3F	; 63
    2f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f0e:	88 23       	and	r24, r24
    2f10:	2c f4       	brge	.+10     	; 0x2f1c <LCD_displayCharacter+0x354>
		__ticks = 1;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	3f c0       	rjmp	.+126    	; 0x2f9a <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	3f ef       	ldi	r19, 0xFF	; 255
    2f28:	4f e7       	ldi	r20, 0x7F	; 127
    2f2a:	57 e4       	ldi	r21, 0x47	; 71
    2f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f30:	18 16       	cp	r1, r24
    2f32:	4c f5       	brge	.+82     	; 0x2f86 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e2       	ldi	r20, 0x20	; 32
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	9e 83       	std	Y+6, r25	; 0x06
    2f5a:	8d 83       	std	Y+5, r24	; 0x05
    2f5c:	0f c0       	rjmp	.+30     	; 0x2f7c <LCD_displayCharacter+0x3b4>
    2f5e:	89 e1       	ldi	r24, 0x19	; 25
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9c 83       	std	Y+4, r25	; 0x04
    2f64:	8b 83       	std	Y+3, r24	; 0x03
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <LCD_displayCharacter+0x3a2>
    2f6e:	9c 83       	std	Y+4, r25	; 0x04
    2f70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	00 97       	sbiw	r24, 0x00	; 0
    2f82:	69 f7       	brne	.-38     	; 0x2f5e <LCD_displayCharacter+0x396>
    2f84:	14 c0       	rjmp	.+40     	; 0x2fae <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f86:	6f 81       	ldd	r22, Y+7	; 0x07
    2f88:	78 85       	ldd	r23, Y+8	; 0x08
    2f8a:	89 85       	ldd	r24, Y+9	; 0x09
    2f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <LCD_displayCharacter+0x3de>
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2fae:	e9 96       	adiw	r28, 0x39	; 57
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <LCD_displayString+0x6>
    2fc6:	0f 92       	push	r0
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	9b 83       	std	Y+3, r25	; 0x03
    2fce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fd0:	19 82       	std	Y+1, r1	; 0x01
    2fd2:	0e c0       	rjmp	.+28     	; 0x2ff0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	fc 01       	movw	r30, r24
    2fe0:	e2 0f       	add	r30, r18
    2fe2:	f3 1f       	adc	r31, r19
    2fe4:	80 81       	ld	r24, Z
    2fe6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_displayCharacter>
		i++;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	e2 0f       	add	r30, r18
    2ffe:	f3 1f       	adc	r31, r19
    3000:	80 81       	ld	r24, Z
    3002:	88 23       	and	r24, r24
    3004:	39 f7       	brne	.-50     	; 0x2fd4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	00 d0       	rcall	.+0      	; 0x3018 <LCD_goToRowColumn+0x6>
    3018:	00 d0       	rcall	.+0      	; 0x301a <LCD_goToRowColumn+0x8>
    301a:	0f 92       	push	r0
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	8a 83       	std	Y+2, r24	; 0x02
    3022:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	3d 83       	std	Y+5, r19	; 0x05
    302c:	2c 83       	std	Y+4, r18	; 0x04
    302e:	8c 81       	ldd	r24, Y+4	; 0x04
    3030:	9d 81       	ldd	r25, Y+5	; 0x05
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	91 05       	cpc	r25, r1
    3036:	c1 f0       	breq	.+48     	; 0x3068 <LCD_goToRowColumn+0x56>
    3038:	2c 81       	ldd	r18, Y+4	; 0x04
    303a:	3d 81       	ldd	r19, Y+5	; 0x05
    303c:	22 30       	cpi	r18, 0x02	; 2
    303e:	31 05       	cpc	r19, r1
    3040:	2c f4       	brge	.+10     	; 0x304c <LCD_goToRowColumn+0x3a>
    3042:	8c 81       	ldd	r24, Y+4	; 0x04
    3044:	9d 81       	ldd	r25, Y+5	; 0x05
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	61 f0       	breq	.+24     	; 0x3062 <LCD_goToRowColumn+0x50>
    304a:	19 c0       	rjmp	.+50     	; 0x307e <LCD_goToRowColumn+0x6c>
    304c:	2c 81       	ldd	r18, Y+4	; 0x04
    304e:	3d 81       	ldd	r19, Y+5	; 0x05
    3050:	22 30       	cpi	r18, 0x02	; 2
    3052:	31 05       	cpc	r19, r1
    3054:	69 f0       	breq	.+26     	; 0x3070 <LCD_goToRowColumn+0x5e>
    3056:	8c 81       	ldd	r24, Y+4	; 0x04
    3058:	9d 81       	ldd	r25, Y+5	; 0x05
    305a:	83 30       	cpi	r24, 0x03	; 3
    305c:	91 05       	cpc	r25, r1
    305e:	61 f0       	breq	.+24     	; 0x3078 <LCD_goToRowColumn+0x66>
    3060:	0e c0       	rjmp	.+28     	; 0x307e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	0b c0       	rjmp	.+22     	; 0x307e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	80 5c       	subi	r24, 0xC0	; 192
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	07 c0       	rjmp	.+14     	; 0x307e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x14;
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	8c 5e       	subi	r24, 0xEC	; 236
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	03 c0       	rjmp	.+6      	; 0x307e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x54;
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	8c 5a       	subi	r24, 0xAC	; 172
    307c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	80 68       	ori	r24, 0x80	; 128
    3082:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_sendCommand>
}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	08 95       	ret

00003096 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	00 d0       	rcall	.+0      	; 0x309c <LCD_displayStringRowColumn+0x6>
    309c:	00 d0       	rcall	.+0      	; 0x309e <LCD_displayStringRowColumn+0x8>
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	6a 83       	std	Y+2, r22	; 0x02
    30a6:	5c 83       	std	Y+4, r21	; 0x04
    30a8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	6a 81       	ldd	r22, Y+2	; 0x02
    30ae:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <LCD_displayString>
}
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	62 97       	sbiw	r28, 0x12	; 18
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    30e0:	89 89       	ldd	r24, Y+17	; 0x11
    30e2:	9a 89       	ldd	r25, Y+18	; 0x12
    30e4:	9e 01       	movw	r18, r28
    30e6:	2f 5f       	subi	r18, 0xFF	; 255
    30e8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ea:	b9 01       	movw	r22, r18
    30ec:	4a e0       	ldi	r20, 0x0A	; 10
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <itoa>
   LCD_displayString(buff);
    30f4:	ce 01       	movw	r24, r28
    30f6:	01 96       	adiw	r24, 0x01	; 1
    30f8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <LCD_displayString>
}
    30fc:	62 96       	adiw	r28, 0x12	; 18
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_sendCommand>
}
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <__vector_9>:

/**************************************************************************
 *                              Timer0
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    3122:	1f 92       	push	r1
    3124:	0f 92       	push	r0
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	0f 92       	push	r0
    312a:	11 24       	eor	r1, r1
    312c:	2f 93       	push	r18
    312e:	3f 93       	push	r19
    3130:	4f 93       	push	r20
    3132:	5f 93       	push	r21
    3134:	6f 93       	push	r22
    3136:	7f 93       	push	r23
    3138:	8f 93       	push	r24
    313a:	9f 93       	push	r25
    313c:	af 93       	push	r26
    313e:	bf 93       	push	r27
    3140:	ef 93       	push	r30
    3142:	ff 93       	push	r31
    3144:	df 93       	push	r29
    3146:	cf 93       	push	r28
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    314c:	80 91 c5 01 	lds	r24, 0x01C5
    3150:	90 91 c6 01 	lds	r25, 0x01C6
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	29 f0       	breq	.+10     	; 0x3162 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3158:	e0 91 c5 01 	lds	r30, 0x01C5
    315c:	f0 91 c6 01 	lds	r31, 0x01C6
    3160:	09 95       	icall
	}
}
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	ff 91       	pop	r31
    3168:	ef 91       	pop	r30
    316a:	bf 91       	pop	r27
    316c:	af 91       	pop	r26
    316e:	9f 91       	pop	r25
    3170:	8f 91       	pop	r24
    3172:	7f 91       	pop	r23
    3174:	6f 91       	pop	r22
    3176:	5f 91       	pop	r21
    3178:	4f 91       	pop	r20
    317a:	3f 91       	pop	r19
    317c:	2f 91       	pop	r18
    317e:	0f 90       	pop	r0
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	0f 90       	pop	r0
    3184:	1f 90       	pop	r1
    3186:	18 95       	reti

00003188 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    3188:	1f 92       	push	r1
    318a:	0f 92       	push	r0
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	0f 92       	push	r0
    3190:	11 24       	eor	r1, r1
    3192:	2f 93       	push	r18
    3194:	3f 93       	push	r19
    3196:	4f 93       	push	r20
    3198:	5f 93       	push	r21
    319a:	6f 93       	push	r22
    319c:	7f 93       	push	r23
    319e:	8f 93       	push	r24
    31a0:	9f 93       	push	r25
    31a2:	af 93       	push	r26
    31a4:	bf 93       	push	r27
    31a6:	ef 93       	push	r30
    31a8:	ff 93       	push	r31
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    31b2:	80 91 c5 01 	lds	r24, 0x01C5
    31b6:	90 91 c6 01 	lds	r25, 0x01C6
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	29 f0       	breq	.+10     	; 0x31c8 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    31be:	e0 91 c5 01 	lds	r30, 0x01C5
    31c2:	f0 91 c6 01 	lds	r31, 0x01C6
    31c6:	09 95       	icall
	}
}
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	ff 91       	pop	r31
    31ce:	ef 91       	pop	r30
    31d0:	bf 91       	pop	r27
    31d2:	af 91       	pop	r26
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	7f 91       	pop	r23
    31da:	6f 91       	pop	r22
    31dc:	5f 91       	pop	r21
    31de:	4f 91       	pop	r20
    31e0:	3f 91       	pop	r19
    31e2:	2f 91       	pop	r18
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <__vector_8>:

/**************************************************************************
 *                              Timer1
 * ************************************************************************/
ISR(TIMER1_OVF_vect)
{
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	2f 93       	push	r18
    31fa:	3f 93       	push	r19
    31fc:	4f 93       	push	r20
    31fe:	5f 93       	push	r21
    3200:	6f 93       	push	r22
    3202:	7f 93       	push	r23
    3204:	8f 93       	push	r24
    3206:	9f 93       	push	r25
    3208:	af 93       	push	r26
    320a:	bf 93       	push	r27
    320c:	ef 93       	push	r30
    320e:	ff 93       	push	r31
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    3218:	80 91 c7 01 	lds	r24, 0x01C7
    321c:	90 91 c8 01 	lds	r25, 0x01C8
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	29 f0       	breq	.+10     	; 0x322e <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3224:	e0 91 c7 01 	lds	r30, 0x01C7
    3228:	f0 91 c8 01 	lds	r31, 0x01C8
    322c:	09 95       	icall
	}
}
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	ff 91       	pop	r31
    3234:	ef 91       	pop	r30
    3236:	bf 91       	pop	r27
    3238:	af 91       	pop	r26
    323a:	9f 91       	pop	r25
    323c:	8f 91       	pop	r24
    323e:	7f 91       	pop	r23
    3240:	6f 91       	pop	r22
    3242:	5f 91       	pop	r21
    3244:	4f 91       	pop	r20
    3246:	3f 91       	pop	r19
    3248:	2f 91       	pop	r18
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	0f 90       	pop	r0
    3250:	1f 90       	pop	r1
    3252:	18 95       	reti

00003254 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    3254:	1f 92       	push	r1
    3256:	0f 92       	push	r0
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	0f 92       	push	r0
    325c:	11 24       	eor	r1, r1
    325e:	2f 93       	push	r18
    3260:	3f 93       	push	r19
    3262:	4f 93       	push	r20
    3264:	5f 93       	push	r21
    3266:	6f 93       	push	r22
    3268:	7f 93       	push	r23
    326a:	8f 93       	push	r24
    326c:	9f 93       	push	r25
    326e:	af 93       	push	r26
    3270:	bf 93       	push	r27
    3272:	ef 93       	push	r30
    3274:	ff 93       	push	r31
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    327e:	80 91 c7 01 	lds	r24, 0x01C7
    3282:	90 91 c8 01 	lds	r25, 0x01C8
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	29 f0       	breq	.+10     	; 0x3294 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    328a:	e0 91 c7 01 	lds	r30, 0x01C7
    328e:	f0 91 c8 01 	lds	r31, 0x01C8
    3292:	09 95       	icall
	}
}
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	ff 91       	pop	r31
    329a:	ef 91       	pop	r30
    329c:	bf 91       	pop	r27
    329e:	af 91       	pop	r26
    32a0:	9f 91       	pop	r25
    32a2:	8f 91       	pop	r24
    32a4:	7f 91       	pop	r23
    32a6:	6f 91       	pop	r22
    32a8:	5f 91       	pop	r21
    32aa:	4f 91       	pop	r20
    32ac:	3f 91       	pop	r19
    32ae:	2f 91       	pop	r18
    32b0:	0f 90       	pop	r0
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	0f 90       	pop	r0
    32b6:	1f 90       	pop	r1
    32b8:	18 95       	reti

000032ba <__vector_4>:

/**************************************************************************
 *                              Timer2
 * ************************************************************************/
ISR(TIMER2_OVF_vect)
{
    32ba:	1f 92       	push	r1
    32bc:	0f 92       	push	r0
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	0f 92       	push	r0
    32c2:	11 24       	eor	r1, r1
    32c4:	2f 93       	push	r18
    32c6:	3f 93       	push	r19
    32c8:	4f 93       	push	r20
    32ca:	5f 93       	push	r21
    32cc:	6f 93       	push	r22
    32ce:	7f 93       	push	r23
    32d0:	8f 93       	push	r24
    32d2:	9f 93       	push	r25
    32d4:	af 93       	push	r26
    32d6:	bf 93       	push	r27
    32d8:	ef 93       	push	r30
    32da:	ff 93       	push	r31
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    32e4:	80 91 c9 01 	lds	r24, 0x01C9
    32e8:	90 91 ca 01 	lds	r25, 0x01CA
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	29 f0       	breq	.+10     	; 0x32fa <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    32f0:	e0 91 c9 01 	lds	r30, 0x01C9
    32f4:	f0 91 ca 01 	lds	r31, 0x01CA
    32f8:	09 95       	icall
	}
}
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	ff 91       	pop	r31
    3300:	ef 91       	pop	r30
    3302:	bf 91       	pop	r27
    3304:	af 91       	pop	r26
    3306:	9f 91       	pop	r25
    3308:	8f 91       	pop	r24
    330a:	7f 91       	pop	r23
    330c:	6f 91       	pop	r22
    330e:	5f 91       	pop	r21
    3310:	4f 91       	pop	r20
    3312:	3f 91       	pop	r19
    3314:	2f 91       	pop	r18
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	0f 90       	pop	r0
    331c:	1f 90       	pop	r1
    331e:	18 95       	reti

00003320 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    3320:	1f 92       	push	r1
    3322:	0f 92       	push	r0
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	0f 92       	push	r0
    3328:	11 24       	eor	r1, r1
    332a:	2f 93       	push	r18
    332c:	3f 93       	push	r19
    332e:	4f 93       	push	r20
    3330:	5f 93       	push	r21
    3332:	6f 93       	push	r22
    3334:	7f 93       	push	r23
    3336:	8f 93       	push	r24
    3338:	9f 93       	push	r25
    333a:	af 93       	push	r26
    333c:	bf 93       	push	r27
    333e:	ef 93       	push	r30
    3340:	ff 93       	push	r31
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    334a:	80 91 c9 01 	lds	r24, 0x01C9
    334e:	90 91 ca 01 	lds	r25, 0x01CA
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	29 f0       	breq	.+10     	; 0x3360 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3356:	e0 91 c9 01 	lds	r30, 0x01C9
    335a:	f0 91 ca 01 	lds	r31, 0x01CA
    335e:	09 95       	icall
	}
}
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	ff 91       	pop	r31
    3366:	ef 91       	pop	r30
    3368:	bf 91       	pop	r27
    336a:	af 91       	pop	r26
    336c:	9f 91       	pop	r25
    336e:	8f 91       	pop	r24
    3370:	7f 91       	pop	r23
    3372:	6f 91       	pop	r22
    3374:	5f 91       	pop	r21
    3376:	4f 91       	pop	r20
    3378:	3f 91       	pop	r19
    337a:	2f 91       	pop	r18
    337c:	0f 90       	pop	r0
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	0f 90       	pop	r0
    3382:	1f 90       	pop	r1
    3384:	18 95       	reti

00003386 <Timer_init>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	6a 97       	sbiw	r28, 0x1a	; 26
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    339e:	e9 81       	ldd	r30, Y+1	; 0x01
    33a0:	fa 81       	ldd	r31, Y+2	; 0x02
    33a2:	80 85       	ldd	r24, Z+8	; 0x08
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	3a 8f       	std	Y+26, r19	; 0x1a
    33aa:	29 8f       	std	Y+25, r18	; 0x19
    33ac:	89 8d       	ldd	r24, Y+25	; 0x19
    33ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	91 05       	cpc	r25, r1
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <Timer_init+0x32>
    33b6:	cf c0       	rjmp	.+414    	; 0x3556 <Timer_init+0x1d0>
    33b8:	e9 8d       	ldd	r30, Y+25	; 0x19
    33ba:	fa 8d       	ldd	r31, Y+26	; 0x1a
    33bc:	e2 30       	cpi	r30, 0x02	; 2
    33be:	f1 05       	cpc	r31, r1
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <Timer_init+0x3e>
    33c2:	9c c1       	rjmp	.+824    	; 0x36fc <Timer_init+0x376>
    33c4:	29 8d       	ldd	r18, Y+25	; 0x19
    33c6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33c8:	21 15       	cp	r18, r1
    33ca:	31 05       	cpc	r19, r1
    33cc:	09 f0       	breq	.+2      	; 0x33d0 <Timer_init+0x4a>
    33ce:	5e c2       	rjmp	.+1212   	; 0x388c <Timer_init+0x506>
	{

	case Timer0:

		/*Clear registers of Timer0 before accessing any of them*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    33d0:	e3 e5       	ldi	r30, 0x53	; 83
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	30 81       	ld	r19, Z
    33d6:	e3 e5       	ldi	r30, 0x53	; 83
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    33dc:	e2 e5       	ldi	r30, 0x52	; 82
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	e2 e5       	ldi	r30, 0x52	; 82
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    33e8:	ec e5       	ldi	r30, 0x5C	; 92
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	90 81       	ld	r25, Z
    33ee:	ec e5       	ldi	r30, 0x5C	; 92
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    33f4:	e9 e5       	ldi	r30, 0x59	; 89
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	20 81       	ld	r18, Z
    33fa:	e9 e5       	ldi	r30, 0x59	; 89
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	10 82       	st	Z, r1
		 * Configure initial value for Timer0 to start count from it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */

		TIMER0_CONTROL_REGIRSTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    3400:	23 e5       	ldi	r18, 0x53	; 83
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	e9 81       	ldd	r30, Y+1	; 0x01
    3406:	fa 81       	ldd	r31, Y+2	; 0x02
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	a2 81       	ldd	r26, Z+2	; 0x02
    340e:	b3 81       	ldd	r27, Z+3	; 0x03
    3410:	f9 01       	movw	r30, r18
    3412:	80 83       	st	Z, r24
		 * Anding with 0XF8 to make sure the first 3-bits in TCCR0 register=0
		 * ORing with the selected timer clock to include it in the first 3-bits
		 * and keep the other bits as they are
		 */

		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    3414:	a3 e5       	ldi	r26, 0x53	; 83
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e3 e5       	ldi	r30, 0x53	; 83
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	98 2f       	mov	r25, r24
    3420:	98 7f       	andi	r25, 0xF8	; 248
    3422:	e9 81       	ldd	r30, Y+1	; 0x01
    3424:	fa 81       	ldd	r31, Y+2	; 0x02
    3426:	81 85       	ldd	r24, Z+9	; 0x09
    3428:	89 2b       	or	r24, r25
    342a:	8c 93       	st	X, r24
		 * Configure compare output mode to work with normal port operation
		 * OC0 disconnected
		 * Clear COM00 bit in TCCR0 register
		 * Clear COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT0);
    342c:	23 e5       	ldi	r18, 0x53	; 83
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	a3 e5       	ldi	r26, 0x53	; 83
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e3 e5       	ldi	r30, 0x53	; 83
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	8f 7e       	andi	r24, 0xEF	; 239
    343c:	8c 93       	st	X, r24
    343e:	8c 91       	ld	r24, X
    3440:	f9 01       	movw	r30, r18
    3442:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT1);
    3444:	23 e5       	ldi	r18, 0x53	; 83
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	a3 e5       	ldi	r26, 0x53	; 83
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e3 e5       	ldi	r30, 0x53	; 83
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	8f 7d       	andi	r24, 0xDF	; 223
    3454:	8c 93       	st	X, r24
    3456:	8c 91       	ld	r24, X
    3458:	f9 01       	movw	r30, r18
    345a:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    345c:	e9 81       	ldd	r30, Y+1	; 0x01
    345e:	fa 81       	ldd	r31, Y+2	; 0x02
    3460:	82 85       	ldd	r24, Z+10	; 0x0a
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	3c 8b       	std	Y+20, r19	; 0x14
    3468:	2b 8b       	std	Y+19, r18	; 0x13
    346a:	8b 89       	ldd	r24, Y+19	; 0x13
    346c:	9c 89       	ldd	r25, Y+20	; 0x14
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	31 f0       	breq	.+12     	; 0x347e <Timer_init+0xf8>
    3472:	eb 89       	ldd	r30, Y+19	; 0x13
    3474:	fc 89       	ldd	r31, Y+20	; 0x14
    3476:	e1 30       	cpi	r30, 0x01	; 1
    3478:	f1 05       	cpc	r31, r1
    347a:	91 f1       	breq	.+100    	; 0x34e0 <Timer_init+0x15a>
    347c:	07 c2       	rjmp	.+1038   	; 0x388c <Timer_init+0x506>
			/*
			 * Configure wave form generation mode to work with normal mode
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    347e:	23 e5       	ldi	r18, 0x53	; 83
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	a3 e5       	ldi	r26, 0x53	; 83
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e3 e5       	ldi	r30, 0x53	; 83
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	8f 7b       	andi	r24, 0xBF	; 191
    348e:	8c 93       	st	X, r24
    3490:	8c 91       	ld	r24, X
    3492:	f9 01       	movw	r30, r18
    3494:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    3496:	23 e5       	ldi	r18, 0x53	; 83
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	a3 e5       	ldi	r26, 0x53	; 83
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e3 e5       	ldi	r30, 0x53	; 83
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	87 7f       	andi	r24, 0xF7	; 247
    34a6:	8c 93       	st	X, r24
    34a8:	8c 91       	ld	r24, X
    34aa:	f9 01       	movw	r30, r18
    34ac:	80 83       	st	Z, r24
			/*
			 * Configure FOC0 bit in the TCCR0 register to be active
			 * As Timer0 is non-PWM
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER,TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    34ae:	23 e5       	ldi	r18, 0x53	; 83
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	a3 e5       	ldi	r26, 0x53	; 83
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e3 e5       	ldi	r30, 0x53	; 83
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	80 68       	ori	r24, 0x80	; 128
    34be:	8c 93       	st	X, r24
    34c0:	8c 91       	ld	r24, X
    34c2:	f9 01       	movw	r30, r18
    34c4:	80 83       	st	Z, r24
			 * Enable Timer0 overflow interrupt
			 * wait for: -Enable I-bit "mask bit" in the SREG register
			 *           -TOV0 bit in the TIFR register to be set
			 * Timer0 overflow mode is ready to work after that
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    34c6:	29 e5       	ldi	r18, 0x59	; 89
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	a9 e5       	ldi	r26, 0x59	; 89
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e9 e5       	ldi	r30, 0x59	; 89
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	81 60       	ori	r24, 0x01	; 1
    34d6:	8c 93       	st	X, r24
    34d8:	8c 91       	ld	r24, X
    34da:	f9 01       	movw	r30, r18
    34dc:	80 83       	st	Z, r24
    34de:	d6 c1       	rjmp	.+940    	; 0x388c <Timer_init+0x506>
			/*
			 * Configure wave form generation mode to work with normal mode
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    34e0:	23 e5       	ldi	r18, 0x53	; 83
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	a3 e5       	ldi	r26, 0x53	; 83
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e3 e5       	ldi	r30, 0x53	; 83
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	8f 7b       	andi	r24, 0xBF	; 191
    34f0:	8c 93       	st	X, r24
    34f2:	8c 91       	ld	r24, X
    34f4:	f9 01       	movw	r30, r18
    34f6:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    34f8:	23 e5       	ldi	r18, 0x53	; 83
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	a3 e5       	ldi	r26, 0x53	; 83
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	e3 e5       	ldi	r30, 0x53	; 83
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	88 60       	ori	r24, 0x08	; 8
    3508:	8c 93       	st	X, r24
    350a:	8c 91       	ld	r24, X
    350c:	f9 01       	movw	r30, r18
    350e:	80 83       	st	Z, r24
			/*
			 * Configure FOC0 bit in the TCCR0 register to be active
			 * As Timer0 is non-PWM
			 * Make FOC0 to be Active as it is compare mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    3510:	23 e5       	ldi	r18, 0x53	; 83
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	a3 e5       	ldi	r26, 0x53	; 83
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e3 e5       	ldi	r30, 0x53	; 83
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	80 68       	ori	r24, 0x80	; 128
    3520:	8c 93       	st	X, r24
    3522:	8c 91       	ld	r24, X
    3524:	f9 01       	movw	r30, r18
    3526:	80 83       	st	Z, r24
			/*
			 * Configure Compare match value for Timer0 to start count from it
			 * Anding with 0XFF to make sure the value won't exceed
			 * 255 as it is 8-bit Timer
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    3528:	2c e5       	ldi	r18, 0x5C	; 92
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	e9 81       	ldd	r30, Y+1	; 0x01
    352e:	fa 81       	ldd	r31, Y+2	; 0x02
    3530:	84 81       	ldd	r24, Z+4	; 0x04
    3532:	95 81       	ldd	r25, Z+5	; 0x05
    3534:	a6 81       	ldd	r26, Z+6	; 0x06
    3536:	b7 81       	ldd	r27, Z+7	; 0x07
    3538:	f9 01       	movw	r30, r18
    353a:	80 83       	st	Z, r24
			 * Enable Timer0 compare match interrupt
			 * wait for: -Enable I-bit "mask bit" in the SREG register
			 *           -OCF0 bit in the TIFR register to be set
			 * Timer0 compare match mode is ready to work after that
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    353c:	29 e5       	ldi	r18, 0x59	; 89
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	a9 e5       	ldi	r26, 0x59	; 89
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e9 e5       	ldi	r30, 0x59	; 89
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	82 60       	ori	r24, 0x02	; 2
    354c:	8c 93       	st	X, r24
    354e:	8c 91       	ld	r24, X
    3550:	f9 01       	movw	r30, r18
    3552:	80 83       	st	Z, r24
    3554:	9b c1       	rjmp	.+822    	; 0x388c <Timer_init+0x506>


		case Timer1:

			/*Clear registers of Timer1 before accessing any of them*/
			TIMER1_CONTROL_REGIRSTER_A        &= 0X00;
    3556:	ef e4       	ldi	r30, 0x4F	; 79
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	20 81       	ld	r18, Z
    355c:	ef e4       	ldi	r30, 0x4F	; 79
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	10 82       	st	Z, r1
			TIMER1_CONTROL_REGIRSTER_B        &= 0X00;
    3562:	ee e4       	ldi	r30, 0x4E	; 78
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	30 81       	ld	r19, Z
    3568:	ee e4       	ldi	r30, 0x4E	; 78
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	10 82       	st	Z, r1
			TIMER1_INITIAL_VALUE_REGISTER     &= 0X00;
    356e:	ec e4       	ldi	r30, 0x4C	; 76
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	ec e4       	ldi	r30, 0x4C	; 76
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	11 82       	std	Z+1, r1	; 0x01
    357c:	10 82       	st	Z, r1
			TIMER1_OUTPUT_COMPARE_REGISTER_A  &= 0X00;
    357e:	ea e4       	ldi	r30, 0x4A	; 74
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	20 81       	ld	r18, Z
    3584:	31 81       	ldd	r19, Z+1	; 0x01
    3586:	ea e4       	ldi	r30, 0x4A	; 74
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	11 82       	std	Z+1, r1	; 0x01
    358c:	10 82       	st	Z, r1
			TIMER1_INTERRUPT_MASK_REGISTER    &= 0X00;
    358e:	e9 e5       	ldi	r30, 0x59	; 89
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	30 81       	ld	r19, Z
    3594:	e9 e5       	ldi	r30, 0x59	; 89
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	10 82       	st	Z, r1
			 * Configure initial value for Timer1 to start count from it
			 * Anding with 0XFF to make sure the value won't exceed
			 *  0XFFFF as it is 16-bit Timer
			 */

			TIMER1_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    359a:	2c e4       	ldi	r18, 0x4C	; 76
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	e9 81       	ldd	r30, Y+1	; 0x01
    35a0:	fa 81       	ldd	r31, Y+2	; 0x02
    35a2:	80 81       	ld	r24, Z
    35a4:	91 81       	ldd	r25, Z+1	; 0x01
    35a6:	a2 81       	ldd	r26, Z+2	; 0x02
    35a8:	b3 81       	ldd	r27, Z+3	; 0x03
    35aa:	f9 01       	movw	r30, r18
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
			 * Anding with 0XF8 to make sure the first 3-bits in TCCR1B register=0
			 * ORing with the selected timer clock to include it in the first 3-bits
			 * and keep the other bits as they are
			 */

			TIMER1_CONTROL_REGIRSTER_B =  (TIMER1_CONTROL_REGIRSTER_B & 0XF8) | (Config_Ptr->timer_clock);
    35b0:	ae e4       	ldi	r26, 0x4E	; 78
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	ee e4       	ldi	r30, 0x4E	; 78
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	98 2f       	mov	r25, r24
    35bc:	98 7f       	andi	r25, 0xF8	; 248
    35be:	e9 81       	ldd	r30, Y+1	; 0x01
    35c0:	fa 81       	ldd	r31, Y+2	; 0x02
    35c2:	81 85       	ldd	r24, Z+9	; 0x09
    35c4:	89 2b       	or	r24, r25
    35c6:	8c 93       	st	X, r24
			 * Configure compare output mode to work with normal port operation
			 * OC1A/OC1B disconnected
			 * Clear COM1A0/COM1A1 bits in TCCR1A register
			 * Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0X0F;
    35c8:	af e4       	ldi	r26, 0x4F	; 79
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	ef e4       	ldi	r30, 0x4F	; 79
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	8f 70       	andi	r24, 0x0F	; 15
    35d4:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    35d6:	e9 81       	ldd	r30, Y+1	; 0x01
    35d8:	fa 81       	ldd	r31, Y+2	; 0x02
    35da:	82 85       	ldd	r24, Z+10	; 0x0a
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	3b 87       	std	Y+11, r19	; 0x0b
    35e2:	2a 87       	std	Y+10, r18	; 0x0a
    35e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	31 f0       	breq	.+12     	; 0x35f8 <Timer_init+0x272>
    35ec:	ea 85       	ldd	r30, Y+10	; 0x0a
    35ee:	fb 85       	ldd	r31, Y+11	; 0x0b
    35f0:	e1 30       	cpi	r30, 0x01	; 1
    35f2:	f1 05       	cpc	r31, r1
    35f4:	a1 f1       	breq	.+104    	; 0x365e <Timer_init+0x2d8>
    35f6:	4a c1       	rjmp	.+660    	; 0x388c <Timer_init+0x506>
				/*
				 * Configure wave form generation mode to work with normal mode
				 * Clear WGM10/WMG11 bit in TCCR1A register
				 * Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    35f8:	af e4       	ldi	r26, 0x4F	; 79
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	ef e4       	ldi	r30, 0x4F	; 79
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	8c 7f       	andi	r24, 0xFC	; 252
    3604:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = TIMER1_CONTROL_REGIRSTER_B & 0XE7 ;
    3606:	ae e4       	ldi	r26, 0x4E	; 78
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	ee e4       	ldi	r30, 0x4E	; 78
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	87 7e       	andi	r24, 0xE7	; 231
    3612:	8c 93       	st	X, r24
				/*
				 * Configure FOC1A/FOC1B bit in the TCCR1 register to be active
				 * As Timer1 is non-PWM
				 * Make FOC1A/FOC1B to be Active as it is overflow mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3614:	2f e4       	ldi	r18, 0x4F	; 79
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	af e4       	ldi	r26, 0x4F	; 79
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	ef e4       	ldi	r30, 0x4F	; 79
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	88 60       	ori	r24, 0x08	; 8
    3624:	8c 93       	st	X, r24
    3626:	8c 91       	ld	r24, X
    3628:	f9 01       	movw	r30, r18
    362a:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    362c:	2f e4       	ldi	r18, 0x4F	; 79
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	af e4       	ldi	r26, 0x4F	; 79
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	ef e4       	ldi	r30, 0x4F	; 79
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	84 60       	ori	r24, 0x04	; 4
    363c:	8c 93       	st	X, r24
    363e:	8c 91       	ld	r24, X
    3640:	f9 01       	movw	r30, r18
    3642:	80 83       	st	Z, r24
				 * Enable Timer1 overflow interrupt
				 * wait for: -Enable I-bit "mask bit" in the SREG register
				 *           -TOV1 bit in the TIFR register to be set
				 * Timer1 overflow mode is ready to work after that
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    3644:	29 e5       	ldi	r18, 0x59	; 89
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	a9 e5       	ldi	r26, 0x59	; 89
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e9 e5       	ldi	r30, 0x59	; 89
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	84 60       	ori	r24, 0x04	; 4
    3654:	8c 93       	st	X, r24
    3656:	8c 91       	ld	r24, X
    3658:	f9 01       	movw	r30, r18
    365a:	80 83       	st	Z, r24
    365c:	17 c1       	rjmp	.+558    	; 0x388c <Timer_init+0x506>
				 * Configure wave form generation mode to work with normal mode
				 * Clear WGM10/WGM11 bits in TCCR1A register
				 * Set WGM12 bit in TCCR1B register
				 * Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    365e:	af e4       	ldi	r26, 0x4F	; 79
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	ef e4       	ldi	r30, 0x4F	; 79
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8c 7f       	andi	r24, 0xFC	; 252
    366a:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    366c:	2e e4       	ldi	r18, 0x4E	; 78
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	ae e4       	ldi	r26, 0x4E	; 78
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	ee e4       	ldi	r30, 0x4E	; 78
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	88 60       	ori	r24, 0x08	; 8
    367c:	8c 93       	st	X, r24
    367e:	8c 91       	ld	r24, X
    3680:	f9 01       	movw	r30, r18
    3682:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_B = CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3684:	2e e4       	ldi	r18, 0x4E	; 78
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	ae e4       	ldi	r26, 0x4E	; 78
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	ee e4       	ldi	r30, 0x4E	; 78
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	8f 7e       	andi	r24, 0xEF	; 239
    3694:	8c 93       	st	X, r24
    3696:	8c 91       	ld	r24, X
    3698:	f9 01       	movw	r30, r18
    369a:	80 83       	st	Z, r24
				/*
				 * Configure FOC1A/FOC1B bit in the TCCR1 register to be active
				 * As Timer1 is non-PWM
				 * Make FOC1A/FOC1B to be Active as it is compare mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    369c:	2f e4       	ldi	r18, 0x4F	; 79
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	af e4       	ldi	r26, 0x4F	; 79
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	ef e4       	ldi	r30, 0x4F	; 79
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	88 60       	ori	r24, 0x08	; 8
    36ac:	8c 93       	st	X, r24
    36ae:	8c 91       	ld	r24, X
    36b0:	f9 01       	movw	r30, r18
    36b2:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    36b4:	2f e4       	ldi	r18, 0x4F	; 79
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	af e4       	ldi	r26, 0x4F	; 79
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	ef e4       	ldi	r30, 0x4F	; 79
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	84 60       	ori	r24, 0x04	; 4
    36c4:	8c 93       	st	X, r24
    36c6:	8c 91       	ld	r24, X
    36c8:	f9 01       	movw	r30, r18
    36ca:	80 83       	st	Z, r24
				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * Anding with 0XFFFF to make sure the value won't exceed
				 * OXFFFF as it is 16-bit Timer
				 */
				TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    36cc:	2a e4       	ldi	r18, 0x4A	; 74
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	e9 81       	ldd	r30, Y+1	; 0x01
    36d2:	fa 81       	ldd	r31, Y+2	; 0x02
    36d4:	84 81       	ldd	r24, Z+4	; 0x04
    36d6:	95 81       	ldd	r25, Z+5	; 0x05
    36d8:	a6 81       	ldd	r26, Z+6	; 0x06
    36da:	b7 81       	ldd	r27, Z+7	; 0x07
    36dc:	f9 01       	movw	r30, r18
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
				 * Enable Timer1 compare match interrupt
				 * wait for: -Enable I-bit "mask bit" in the SREG register
				 *           -OCF1 bit in the TIFR register to be set
				 * Timer1 compare match mode is ready to work after that
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT);
    36e2:	29 e5       	ldi	r18, 0x59	; 89
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	a9 e5       	ldi	r26, 0x59	; 89
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e9 e5       	ldi	r30, 0x59	; 89
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	80 61       	ori	r24, 0x10	; 16
    36f2:	8c 93       	st	X, r24
    36f4:	8c 91       	ld	r24, X
    36f6:	f9 01       	movw	r30, r18
    36f8:	80 83       	st	Z, r24
    36fa:	c8 c0       	rjmp	.+400    	; 0x388c <Timer_init+0x506>


			case Timer2:

				/*Clear registers of Timer0 before accessing any of them*/
				TIMER2_CONTROL_REGIRSTER        &= 0X00;
    36fc:	e5 e4       	ldi	r30, 0x45	; 69
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	20 81       	ld	r18, Z
    3702:	e5 e4       	ldi	r30, 0x45	; 69
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	10 82       	st	Z, r1
				TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    3708:	e4 e4       	ldi	r30, 0x44	; 68
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	30 81       	ld	r19, Z
    370e:	e4 e4       	ldi	r30, 0x44	; 68
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	10 82       	st	Z, r1
				TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    3714:	e3 e4       	ldi	r30, 0x43	; 67
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	e3 e4       	ldi	r30, 0x43	; 67
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	10 82       	st	Z, r1
				TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    3720:	e9 e5       	ldi	r30, 0x59	; 89
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	90 81       	ld	r25, Z
    3726:	e9 e5       	ldi	r30, 0x59	; 89
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	10 82       	st	Z, r1
				/*************************************************************************/
				ASSR  &= 0X00;
    372c:	e2 e4       	ldi	r30, 0x42	; 66
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	20 81       	ld	r18, Z
    3732:	e2 e4       	ldi	r30, 0x42	; 66
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	10 82       	st	Z, r1
				 * Configure initial value for Timer2 to start count from it
				 * Anding with 0XFF to make sure the value won't exceed
				 * 255 as it is 8-bit Timer
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    3738:	24 e4       	ldi	r18, 0x44	; 68
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	e9 81       	ldd	r30, Y+1	; 0x01
    373e:	fa 81       	ldd	r31, Y+2	; 0x02
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	a2 81       	ldd	r26, Z+2	; 0x02
    3746:	b3 81       	ldd	r27, Z+3	; 0x03
    3748:	f9 01       	movw	r30, r18
    374a:	80 83       	st	Z, r24
				 * Anding with 0XF8 to make sure the first 3-bits in TCCR2 register=0
				 * ORing with the selected timer clock to include it in the first 3-bits
				 * and keep the other bits as they are
				 */

				TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    374c:	a5 e4       	ldi	r26, 0x45	; 69
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e5 e4       	ldi	r30, 0x45	; 69
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	98 2f       	mov	r25, r24
    3758:	98 7f       	andi	r25, 0xF8	; 248
    375a:	e9 81       	ldd	r30, Y+1	; 0x01
    375c:	fa 81       	ldd	r31, Y+2	; 0x02
    375e:	81 85       	ldd	r24, Z+9	; 0x09
    3760:	89 2b       	or	r24, r25
    3762:	8c 93       	st	X, r24
				 * Configure compare output mode to work with normal port operation
				 * OC2 disconnected
				 * Clear COM20 bit in TCCR2 register
				 * Clear COM21 bit in TCCR2 register
				 */
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT0);
    3764:	25 e4       	ldi	r18, 0x45	; 69
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	a5 e4       	ldi	r26, 0x45	; 69
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	e5 e4       	ldi	r30, 0x45	; 69
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	8f 7e       	andi	r24, 0xEF	; 239
    3774:	8c 93       	st	X, r24
    3776:	8c 91       	ld	r24, X
    3778:	f9 01       	movw	r30, r18
    377a:	80 83       	st	Z, r24
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT1);
    377c:	25 e4       	ldi	r18, 0x45	; 69
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	a5 e4       	ldi	r26, 0x45	; 69
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e5 e4       	ldi	r30, 0x45	; 69
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	8f 7d       	andi	r24, 0xDF	; 223
    378c:	8c 93       	st	X, r24
    378e:	8c 91       	ld	r24, X
    3790:	f9 01       	movw	r30, r18
    3792:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    3794:	e9 81       	ldd	r30, Y+1	; 0x01
    3796:	fa 81       	ldd	r31, Y+2	; 0x02
    3798:	82 85       	ldd	r24, Z+10	; 0x0a
    379a:	28 2f       	mov	r18, r24
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	3c 83       	std	Y+4, r19	; 0x04
    37a0:	2b 83       	std	Y+3, r18	; 0x03
    37a2:	8b 81       	ldd	r24, Y+3	; 0x03
    37a4:	9c 81       	ldd	r25, Y+4	; 0x04
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	31 f0       	breq	.+12     	; 0x37b6 <Timer_init+0x430>
    37aa:	eb 81       	ldd	r30, Y+3	; 0x03
    37ac:	fc 81       	ldd	r31, Y+4	; 0x04
    37ae:	e1 30       	cpi	r30, 0x01	; 1
    37b0:	f1 05       	cpc	r31, r1
    37b2:	91 f1       	breq	.+100    	; 0x3818 <Timer_init+0x492>
    37b4:	6b c0       	rjmp	.+214    	; 0x388c <Timer_init+0x506>
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM00 bit in TCCR0 register
					 * Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    37b6:	25 e4       	ldi	r18, 0x45	; 69
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	a5 e4       	ldi	r26, 0x45	; 69
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	e5 e4       	ldi	r30, 0x45	; 69
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	8f 7b       	andi	r24, 0xBF	; 191
    37c6:	8c 93       	st	X, r24
    37c8:	8c 91       	ld	r24, X
    37ca:	f9 01       	movw	r30, r18
    37cc:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    37ce:	25 e4       	ldi	r18, 0x45	; 69
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	a5 e4       	ldi	r26, 0x45	; 69
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e5 e4       	ldi	r30, 0x45	; 69
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	87 7f       	andi	r24, 0xF7	; 247
    37de:	8c 93       	st	X, r24
    37e0:	8c 91       	ld	r24, X
    37e2:	f9 01       	movw	r30, r18
    37e4:	80 83       	st	Z, r24
					/*
					 * Configure FOC2 bit in the TCCR2 register to be active
					 * As Timer2 is non-PWM
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    37e6:	25 e4       	ldi	r18, 0x45	; 69
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	a5 e4       	ldi	r26, 0x45	; 69
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	e5 e4       	ldi	r30, 0x45	; 69
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	80 68       	ori	r24, 0x80	; 128
    37f6:	8c 93       	st	X, r24
    37f8:	8c 91       	ld	r24, X
    37fa:	f9 01       	movw	r30, r18
    37fc:	80 83       	st	Z, r24
					 * Enable Timer0 overflow interrupt
					 * wait for: -Enable I-bit "mask bit" in the SREG register
					 *           -TOV0 bit in the TIFR register to be set
					 * Timer0 overflow mode is ready to work after that
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    37fe:	29 e5       	ldi	r18, 0x59	; 89
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	a9 e5       	ldi	r26, 0x59	; 89
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e9 e5       	ldi	r30, 0x59	; 89
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	80 64       	ori	r24, 0x40	; 64
    380e:	8c 93       	st	X, r24
    3810:	8c 91       	ld	r24, X
    3812:	f9 01       	movw	r30, r18
    3814:	80 83       	st	Z, r24
    3816:	3a c0       	rjmp	.+116    	; 0x388c <Timer_init+0x506>
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM20 bit in TCCR2 register
					 * Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    3818:	25 e4       	ldi	r18, 0x45	; 69
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	a5 e4       	ldi	r26, 0x45	; 69
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e5 e4       	ldi	r30, 0x45	; 69
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	80 81       	ld	r24, Z
    3826:	8f 7b       	andi	r24, 0xBF	; 191
    3828:	8c 93       	st	X, r24
    382a:	8c 91       	ld	r24, X
    382c:	f9 01       	movw	r30, r18
    382e:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    3830:	25 e4       	ldi	r18, 0x45	; 69
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	a5 e4       	ldi	r26, 0x45	; 69
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e5 e4       	ldi	r30, 0x45	; 69
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	88 60       	ori	r24, 0x08	; 8
    3840:	8c 93       	st	X, r24
    3842:	8c 91       	ld	r24, X
    3844:	f9 01       	movw	r30, r18
    3846:	80 83       	st	Z, r24
					/*
					 * Configure FOC2 bit in the TCCR2 register to be active
					 * As Timer2 is non-PWM
					 * Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    3848:	25 e4       	ldi	r18, 0x45	; 69
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	a5 e4       	ldi	r26, 0x45	; 69
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	e5 e4       	ldi	r30, 0x45	; 69
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	80 68       	ori	r24, 0x80	; 128
    3858:	8c 93       	st	X, r24
    385a:	8c 91       	ld	r24, X
    385c:	f9 01       	movw	r30, r18
    385e:	80 83       	st	Z, r24
					/*
					 * Configure Compare match value for Timer2 to start count from it
					 * Anding with 0XFF to make sure the value won't exceed
					 * 255 as it is 8-bit Timer
					 */
					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    3860:	23 e4       	ldi	r18, 0x43	; 67
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	e9 81       	ldd	r30, Y+1	; 0x01
    3866:	fa 81       	ldd	r31, Y+2	; 0x02
    3868:	84 81       	ldd	r24, Z+4	; 0x04
    386a:	95 81       	ldd	r25, Z+5	; 0x05
    386c:	a6 81       	ldd	r26, Z+6	; 0x06
    386e:	b7 81       	ldd	r27, Z+7	; 0x07
    3870:	f9 01       	movw	r30, r18
    3872:	80 83       	st	Z, r24
					 * Enable Timer2 compare match interrupt
					 * wait for: -Enable I-bit "mask bit" in the SREG register
					 *           -OCF2 bit in the TIFR register to be set
					 * Timer2 compare match mode is ready to work after that
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    3874:	29 e5       	ldi	r18, 0x59	; 89
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	a9 e5       	ldi	r26, 0x59	; 89
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e9 e5       	ldi	r30, 0x59	; 89
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	80 68       	ori	r24, 0x80	; 128
    3884:	8c 93       	st	X, r24
    3886:	8c 91       	ld	r24, X
    3888:	f9 01       	movw	r30, r18
    388a:	80 83       	st	Z, r24

				break; /*End of Timer2*/

	}/*End of Super switch case*/

}/*End of the Timer_init*/
    388c:	6a 96       	adiw	r28, 0x1a	; 26
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <Timer_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	00 d0       	rcall	.+0      	; 0x38a4 <Timer_setCallBack+0x6>
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <Timer_setCallBack+0x8>
    38a6:	0f 92       	push	r0
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
    38b0:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	3d 83       	std	Y+5, r19	; 0x05
    38ba:	2c 83       	std	Y+4, r18	; 0x04
    38bc:	8c 81       	ldd	r24, Y+4	; 0x04
    38be:	9d 81       	ldd	r25, Y+5	; 0x05
    38c0:	81 30       	cpi	r24, 0x01	; 1
    38c2:	91 05       	cpc	r25, r1
    38c4:	81 f0       	breq	.+32     	; 0x38e6 <Timer_setCallBack+0x48>
    38c6:	2c 81       	ldd	r18, Y+4	; 0x04
    38c8:	3d 81       	ldd	r19, Y+5	; 0x05
    38ca:	22 30       	cpi	r18, 0x02	; 2
    38cc:	31 05       	cpc	r19, r1
    38ce:	91 f0       	breq	.+36     	; 0x38f4 <Timer_setCallBack+0x56>
    38d0:	8c 81       	ldd	r24, Y+4	; 0x04
    38d2:	9d 81       	ldd	r25, Y+5	; 0x05
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	a1 f4       	brne	.+40     	; 0x3900 <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0_callBackPtr = a_ptr;
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
    38dc:	90 93 c6 01 	sts	0x01C6, r25
    38e0:	80 93 c5 01 	sts	0x01C5, r24
    38e4:	0d c0       	rjmp	.+26     	; 0x3900 <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1_callBackPtr = a_ptr;
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ea:	90 93 c8 01 	sts	0x01C8, r25
    38ee:	80 93 c7 01 	sts	0x01C7, r24
    38f2:	06 c0       	rjmp	.+12     	; 0x3900 <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2_callBackPtr = a_ptr;
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	90 93 ca 01 	sts	0x01CA, r25
    38fc:	80 93 c9 01 	sts	0x01C9, r24
		break;
	} /*End of the switch case*/

}/*End of the setCallBack function*/
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <Timer_stop>:
 * [Returns]:      NONE
 ***************************************************************************************************/


void Timer_stop(Timer_Type timer_type)
{
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	00 d0       	rcall	.+0      	; 0x3916 <Timer_stop+0x6>
    3916:	0f 92       	push	r0
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	89 83       	std	Y+1, r24	; 0x01

	switch(timer_type)
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	28 2f       	mov	r18, r24
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	3b 83       	std	Y+3, r19	; 0x03
    3926:	2a 83       	std	Y+2, r18	; 0x02
    3928:	8a 81       	ldd	r24, Y+2	; 0x02
    392a:	9b 81       	ldd	r25, Y+3	; 0x03
    392c:	81 30       	cpi	r24, 0x01	; 1
    392e:	91 05       	cpc	r25, r1
    3930:	89 f0       	breq	.+34     	; 0x3954 <Timer_stop+0x44>
    3932:	2a 81       	ldd	r18, Y+2	; 0x02
    3934:	3b 81       	ldd	r19, Y+3	; 0x03
    3936:	22 30       	cpi	r18, 0x02	; 2
    3938:	31 05       	cpc	r19, r1
    393a:	a1 f0       	breq	.+40     	; 0x3964 <Timer_stop+0x54>
    393c:	8a 81       	ldd	r24, Y+2	; 0x02
    393e:	9b 81       	ldd	r25, Y+3	; 0x03
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	b9 f4       	brne	.+46     	; 0x3972 <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR0 register
		 * stop the clock of the timer
		 * timer0 will stop incrementing
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) ;
    3944:	a3 e5       	ldi	r26, 0x53	; 83
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	e3 e5       	ldi	r30, 0x53	; 83
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	88 7f       	andi	r24, 0xF8	; 248
    3950:	8c 93       	st	X, r24
    3952:	0f c0       	rjmp	.+30     	; 0x3972 <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR1B register
		 * stop the clock of the timer
		 * timer1 will stop incrementing
		 */
		TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & 0XF8) ;
    3954:	ae e4       	ldi	r26, 0x4E	; 78
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	ee e4       	ldi	r30, 0x4E	; 78
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	88 7f       	andi	r24, 0xF8	; 248
    3960:	8c 93       	st	X, r24
    3962:	07 c0       	rjmp	.+14     	; 0x3972 <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR2 register
		 * stop the clock of the timer
		 * timer2 will stop incrementing
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) ;
    3964:	a5 e4       	ldi	r26, 0x45	; 69
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e5 e4       	ldi	r30, 0x45	; 69
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	88 7f       	andi	r24, 0xF8	; 248
    3970:	8c 93       	st	X, r24
		break;

	} /*End of the switch case*/


}/*End of the Timer_stop function*/
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <Timer_DeInit>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Timer_DeInit(Timer_Type timer_type)
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	62 97       	sbiw	r28, 0x12	; 18
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	28 2f       	mov	r18, r24
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	3a 8b       	std	Y+18, r19	; 0x12
    399c:	29 8b       	std	Y+17, r18	; 0x11
    399e:	89 89       	ldd	r24, Y+17	; 0x11
    39a0:	9a 89       	ldd	r25, Y+18	; 0x12
    39a2:	81 30       	cpi	r24, 0x01	; 1
    39a4:	91 05       	cpc	r25, r1
    39a6:	21 f1       	breq	.+72     	; 0x39f0 <Timer_DeInit+0x72>
    39a8:	29 89       	ldd	r18, Y+17	; 0x11
    39aa:	3a 89       	ldd	r19, Y+18	; 0x12
    39ac:	22 30       	cpi	r18, 0x02	; 2
    39ae:	31 05       	cpc	r19, r1
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <Timer_DeInit+0x36>
    39b2:	41 c0       	rjmp	.+130    	; 0x3a36 <Timer_DeInit+0xb8>
    39b4:	89 89       	ldd	r24, Y+17	; 0x11
    39b6:	9a 89       	ldd	r25, Y+18	; 0x12
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	09 f0       	breq	.+2      	; 0x39be <Timer_DeInit+0x40>
    39bc:	54 c0       	rjmp	.+168    	; 0x3a66 <Timer_DeInit+0xe8>
	{
	case Timer0:

		/*Clear all register in Timer0*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    39be:	e3 e5       	ldi	r30, 0x53	; 83
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	90 81       	ld	r25, Z
    39c4:	e3 e5       	ldi	r30, 0x53	; 83
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    39ca:	e2 e5       	ldi	r30, 0x52	; 82
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	20 81       	ld	r18, Z
    39d0:	e2 e5       	ldi	r30, 0x52	; 82
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    39d6:	ec e5       	ldi	r30, 0x5C	; 92
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	30 81       	ld	r19, Z
    39dc:	ec e5       	ldi	r30, 0x5C	; 92
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    39e2:	e9 e5       	ldi	r30, 0x59	; 89
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	e9 e5       	ldi	r30, 0x59	; 89
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	10 82       	st	Z, r1
    39ee:	3b c0       	rjmp	.+118    	; 0x3a66 <Timer_DeInit+0xe8>
		break;

	case Timer1:

		/*Clear all register in Timer1*/
		TIMER1_CONTROL_REGIRSTER_A         &= 0X00;
    39f0:	ef e4       	ldi	r30, 0x4F	; 79
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	90 81       	ld	r25, Z
    39f6:	ef e4       	ldi	r30, 0x4F	; 79
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGIRSTER_B         &= 0X00;
    39fc:	ee e4       	ldi	r30, 0x4E	; 78
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	20 81       	ld	r18, Z
    3a02:	ee e4       	ldi	r30, 0x4E	; 78
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER      &= 0X00;
    3a08:	ec e4       	ldi	r30, 0x4C	; 76
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	80 81       	ld	r24, Z
    3a0e:	91 81       	ldd	r25, Z+1	; 0x01
    3a10:	ec e4       	ldi	r30, 0x4C	; 76
    3a12:	f0 e0       	ldi	r31, 0x00	; 0
    3a14:	11 82       	std	Z+1, r1	; 0x01
    3a16:	10 82       	st	Z, r1
		TIMER1_OUTPUT_COMPARE_REGISTER_A   &= 0X00;
    3a18:	ea e4       	ldi	r30, 0x4A	; 74
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	20 81       	ld	r18, Z
    3a1e:	31 81       	ldd	r19, Z+1	; 0x01
    3a20:	ea e4       	ldi	r30, 0x4A	; 74
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	11 82       	std	Z+1, r1	; 0x01
    3a26:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER     &= 0X00;
    3a28:	e9 e5       	ldi	r30, 0x59	; 89
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	30 81       	ld	r19, Z
    3a2e:	e9 e5       	ldi	r30, 0x59	; 89
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	10 82       	st	Z, r1
    3a34:	18 c0       	rjmp	.+48     	; 0x3a66 <Timer_DeInit+0xe8>


	case Timer2:

		/*Clear all register in Timer2*/
		TIMER2_CONTROL_REGIRSTER        &= 0X00;
    3a36:	e5 e4       	ldi	r30, 0x45	; 69
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	e5 e4       	ldi	r30, 0x45	; 69
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    3a42:	e4 e4       	ldi	r30, 0x44	; 68
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	90 81       	ld	r25, Z
    3a48:	e4 e4       	ldi	r30, 0x44	; 68
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	10 82       	st	Z, r1
		TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    3a4e:	e3 e4       	ldi	r30, 0x43	; 67
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	20 81       	ld	r18, Z
    3a54:	e3 e4       	ldi	r30, 0x43	; 67
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    3a5a:	e9 e5       	ldi	r30, 0x59	; 89
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	30 81       	ld	r19, Z
    3a60:	e9 e5       	ldi	r30, 0x59	; 89
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	10 82       	st	Z, r1
		break;

	} /*End of the switch case*/


}/*end of the Timer_DeInit function*/
    3a66:	62 96       	adiw	r28, 0x12	; 18
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	cf 91       	pop	r28
    3a74:	df 91       	pop	r29
    3a76:	08 95       	ret

00003a78 <UART_init>:

#include "uart.h"


void UART_init(const UART_config * cofig_Ptr)
{
    3a78:	df 93       	push	r29
    3a7a:	cf 93       	push	r28
    3a7c:	00 d0       	rcall	.+0      	; 0x3a7e <UART_init+0x6>
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	9a 83       	std	Y+2, r25	; 0x02
    3a84:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= (1 << RXEN) | (1 << TXEN);
    3a86:	aa e2       	ldi	r26, 0x2A	; 42
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	ea e2       	ldi	r30, 0x2A	; 42
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	88 61       	ori	r24, 0x18	; 24
    3a92:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) ;
    3a94:	a0 e4       	ldi	r26, 0x40	; 64
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	e0 e4       	ldi	r30, 0x40	; 64
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	80 68       	ori	r24, 0x80	; 128
    3aa0:	8c 93       	st	X, r24

	/*double speed*/
	UCSRA = (UCSRA & 0xFD) | (double_speed << 1);
    3aa2:	ab e2       	ldi	r26, 0x2B	; 43
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	eb e2       	ldi	r30, 0x2B	; 43
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	80 81       	ld	r24, Z
    3aac:	82 60       	ori	r24, 0x02	; 2
    3aae:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    3ab0:	a0 e4       	ldi	r26, 0x40	; 64
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	e0 e4       	ldi	r30, 0x40	; 64
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	28 2f       	mov	r18, r24
    3abc:	29 7f       	andi	r18, 0xF9	; 249
    3abe:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ac2:	80 81       	ld	r24, Z
    3ac4:	88 2f       	mov	r24, r24
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	83 70       	andi	r24, 0x03	; 3
    3aca:	90 70       	andi	r25, 0x00	; 0
    3acc:	88 0f       	add	r24, r24
    3ace:	99 1f       	adc	r25, r25
    3ad0:	82 2b       	or	r24, r18
    3ad2:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    3ad4:	aa e2       	ldi	r26, 0x2A	; 42
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	ea e2       	ldi	r30, 0x2A	; 42
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	80 81       	ld	r24, Z
    3ade:	98 2f       	mov	r25, r24
    3ae0:	9b 7f       	andi	r25, 0xFB	; 251
    3ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae6:	80 81       	ld	r24, Z
    3ae8:	84 70       	andi	r24, 0x04	; 4
    3aea:	89 2b       	or	r24, r25
    3aec:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    3aee:	a0 e4       	ldi	r26, 0x40	; 64
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e0 e4       	ldi	r30, 0x40	; 64
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	28 2f       	mov	r18, r24
    3afa:	2f 7c       	andi	r18, 0xCF	; 207
    3afc:	e9 81       	ldd	r30, Y+1	; 0x01
    3afe:	fa 81       	ldd	r31, Y+2	; 0x02
    3b00:	81 81       	ldd	r24, Z+1	; 0x01
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	82 95       	swap	r24
    3b08:	92 95       	swap	r25
    3b0a:	90 7f       	andi	r25, 0xF0	; 240
    3b0c:	98 27       	eor	r25, r24
    3b0e:	80 7f       	andi	r24, 0xF0	; 240
    3b10:	98 27       	eor	r25, r24
    3b12:	82 2b       	or	r24, r18
    3b14:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    3b16:	a0 e4       	ldi	r26, 0x40	; 64
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e0 e4       	ldi	r30, 0x40	; 64
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	28 2f       	mov	r18, r24
    3b22:	27 7f       	andi	r18, 0xF7	; 247
    3b24:	e9 81       	ldd	r30, Y+1	; 0x01
    3b26:	fa 81       	ldd	r31, Y+2	; 0x02
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	88 2f       	mov	r24, r24
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	82 2b       	or	r24, r18
    3b3c:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (mode_bit << 6);
    3b3e:	a0 e4       	ldi	r26, 0x40	; 64
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e0 e4       	ldi	r30, 0x40	; 64
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	8f 7b       	andi	r24, 0xBF	; 191
    3b4a:	8c 93       	st	X, r24

	UBRRL = BAUD_PRESCALE;
    3b4c:	e9 e2       	ldi	r30, 0x29	; 41
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	8c e0       	ldi	r24, 0x0C	; 12
    3b52:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE >> 8;
    3b54:	e0 e4       	ldi	r30, 0x40	; 64
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	10 82       	st	Z, r1
}
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	0f 92       	push	r0
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    3b70:	eb e2       	ldi	r30, 0x2B	; 43
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	80 81       	ld	r24, Z
    3b76:	88 2f       	mov	r24, r24
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	80 72       	andi	r24, 0x20	; 32
    3b7c:	90 70       	andi	r25, 0x00	; 0
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	b9 f3       	breq	.-18     	; 0x3b70 <UART_sendByte+0xc>
	UDR = data;
    3b82:	ec e2       	ldi	r30, 0x2C	; 44
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	80 83       	st	Z, r24
}
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    3b9a:	eb e2       	ldi	r30, 0x2B	; 43
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 23       	and	r24, r24
    3ba2:	dc f7       	brge	.-10     	; 0x3b9a <UART_recieveByte+0x8>
	return UDR;
    3ba4:	ec e2       	ldi	r30, 0x2C	; 44
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z
}
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <UART_sendString+0x6>
    3bb6:	0f 92       	push	r0
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	9b 83       	std	Y+3, r25	; 0x03
    3bbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bc0:	19 82       	std	Y+1, r1	; 0x01
    3bc2:	0e c0       	rjmp	.+28     	; 0x3be0 <UART_sendString+0x30>
	while (str[i] != '\0')
	{
		UART_sendByte(str[i]);
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	8a 81       	ldd	r24, Y+2	; 0x02
    3bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bce:	fc 01       	movw	r30, r24
    3bd0:	e2 0f       	add	r30, r18
    3bd2:	f3 1f       	adc	r31, r19
    3bd4:	80 81       	ld	r24, Z
    3bd6:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <UART_sendByte>
		i++;
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	8f 5f       	subi	r24, 0xFF	; 255
    3bde:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	28 2f       	mov	r18, r24
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	8a 81       	ldd	r24, Y+2	; 0x02
    3be8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bea:	fc 01       	movw	r30, r24
    3bec:	e2 0f       	add	r30, r18
    3bee:	f3 1f       	adc	r31, r19
    3bf0:	80 81       	ld	r24, Z
    3bf2:	88 23       	and	r24, r24
    3bf4:	39 f7       	brne	.-50     	; 0x3bc4 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <UART_recieveString>:

void UART_recieveString(uint8 *str)
{
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	df 93       	push	r29
    3c08:	cf 93       	push	r28
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <UART_recieveString+0xa>
    3c0c:	0f 92       	push	r0
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	9b 83       	std	Y+3, r25	; 0x03
    3c14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c16:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	28 2f       	mov	r18, r24
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	9b 81       	ldd	r25, Y+3	; 0x03
    3c22:	8c 01       	movw	r16, r24
    3c24:	02 0f       	add	r16, r18
    3c26:	13 1f       	adc	r17, r19
    3c28:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	80 83       	st	Z, r24
    3c30:	0f c0       	rjmp	.+30     	; 0x3c50 <UART_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	8f 5f       	subi	r24, 0xFF	; 255
    3c36:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c40:	9b 81       	ldd	r25, Y+3	; 0x03
    3c42:	8c 01       	movw	r16, r24
    3c44:	02 0f       	add	r16, r18
    3c46:	13 1f       	adc	r17, r19
    3c48:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_recieveByte>
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	80 83       	st	Z, r24

void UART_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while (str[i] != '#')
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	28 2f       	mov	r18, r24
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	e2 0f       	add	r30, r18
    3c5e:	f3 1f       	adc	r31, r19
    3c60:	80 81       	ld	r24, Z
    3c62:	83 32       	cpi	r24, 0x23	; 35
    3c64:	31 f7       	brne	.-52     	; 0x3c32 <UART_recieveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	28 2f       	mov	r18, r24
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c70:	fc 01       	movw	r30, r24
    3c72:	e2 0f       	add	r30, r18
    3c74:	f3 1f       	adc	r31, r19
    3c76:	10 82       	st	Z, r1
}
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	08 95       	ret

00003c88 <__prologue_saves__>:
    3c88:	2f 92       	push	r2
    3c8a:	3f 92       	push	r3
    3c8c:	4f 92       	push	r4
    3c8e:	5f 92       	push	r5
    3c90:	6f 92       	push	r6
    3c92:	7f 92       	push	r7
    3c94:	8f 92       	push	r8
    3c96:	9f 92       	push	r9
    3c98:	af 92       	push	r10
    3c9a:	bf 92       	push	r11
    3c9c:	cf 92       	push	r12
    3c9e:	df 92       	push	r13
    3ca0:	ef 92       	push	r14
    3ca2:	ff 92       	push	r15
    3ca4:	0f 93       	push	r16
    3ca6:	1f 93       	push	r17
    3ca8:	cf 93       	push	r28
    3caa:	df 93       	push	r29
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	ca 1b       	sub	r28, r26
    3cb2:	db 0b       	sbc	r29, r27
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	09 94       	ijmp

00003cc0 <__epilogue_restores__>:
    3cc0:	2a 88       	ldd	r2, Y+18	; 0x12
    3cc2:	39 88       	ldd	r3, Y+17	; 0x11
    3cc4:	48 88       	ldd	r4, Y+16	; 0x10
    3cc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cca:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ccc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cce:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cd2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cd4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cd6:	df 80       	ldd	r13, Y+7	; 0x07
    3cd8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cda:	fd 80       	ldd	r15, Y+5	; 0x05
    3cdc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cde:	1b 81       	ldd	r17, Y+3	; 0x03
    3ce0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ce2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ce4:	ce 0f       	add	r28, r30
    3ce6:	d1 1d       	adc	r29, r1
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	f8 94       	cli
    3cec:	de bf       	out	0x3e, r29	; 62
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	ed 01       	movw	r28, r26
    3cf4:	08 95       	ret

00003cf6 <itoa>:
    3cf6:	fb 01       	movw	r30, r22
    3cf8:	9f 01       	movw	r18, r30
    3cfa:	e8 94       	clt
    3cfc:	42 30       	cpi	r20, 0x02	; 2
    3cfe:	c4 f0       	brlt	.+48     	; 0x3d30 <itoa+0x3a>
    3d00:	45 32       	cpi	r20, 0x25	; 37
    3d02:	b4 f4       	brge	.+44     	; 0x3d30 <itoa+0x3a>
    3d04:	4a 30       	cpi	r20, 0x0A	; 10
    3d06:	29 f4       	brne	.+10     	; 0x3d12 <itoa+0x1c>
    3d08:	97 fb       	bst	r25, 7
    3d0a:	1e f4       	brtc	.+6      	; 0x3d12 <itoa+0x1c>
    3d0c:	90 95       	com	r25
    3d0e:	81 95       	neg	r24
    3d10:	9f 4f       	sbci	r25, 0xFF	; 255
    3d12:	64 2f       	mov	r22, r20
    3d14:	77 27       	eor	r23, r23
    3d16:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodhi4>
    3d1a:	80 5d       	subi	r24, 0xD0	; 208
    3d1c:	8a 33       	cpi	r24, 0x3A	; 58
    3d1e:	0c f0       	brlt	.+2      	; 0x3d22 <itoa+0x2c>
    3d20:	89 5d       	subi	r24, 0xD9	; 217
    3d22:	81 93       	st	Z+, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	a1 f7       	brne	.-24     	; 0x3d12 <itoa+0x1c>
    3d2a:	16 f4       	brtc	.+4      	; 0x3d30 <itoa+0x3a>
    3d2c:	5d e2       	ldi	r21, 0x2D	; 45
    3d2e:	51 93       	st	Z+, r21
    3d30:	10 82       	st	Z, r1
    3d32:	c9 01       	movw	r24, r18
    3d34:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <strrev>

00003d38 <strrev>:
    3d38:	dc 01       	movw	r26, r24
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	67 2f       	mov	r22, r23
    3d3e:	71 91       	ld	r23, Z+
    3d40:	77 23       	and	r23, r23
    3d42:	e1 f7       	brne	.-8      	; 0x3d3c <strrev+0x4>
    3d44:	32 97       	sbiw	r30, 0x02	; 2
    3d46:	04 c0       	rjmp	.+8      	; 0x3d50 <strrev+0x18>
    3d48:	7c 91       	ld	r23, X
    3d4a:	6d 93       	st	X+, r22
    3d4c:	70 83       	st	Z, r23
    3d4e:	62 91       	ld	r22, -Z
    3d50:	ae 17       	cp	r26, r30
    3d52:	bf 07       	cpc	r27, r31
    3d54:	c8 f3       	brcs	.-14     	; 0x3d48 <strrev+0x10>
    3d56:	08 95       	ret

00003d58 <__udivmodhi4>:
    3d58:	aa 1b       	sub	r26, r26
    3d5a:	bb 1b       	sub	r27, r27
    3d5c:	51 e1       	ldi	r21, 0x11	; 17
    3d5e:	07 c0       	rjmp	.+14     	; 0x3d6e <__udivmodhi4_ep>

00003d60 <__udivmodhi4_loop>:
    3d60:	aa 1f       	adc	r26, r26
    3d62:	bb 1f       	adc	r27, r27
    3d64:	a6 17       	cp	r26, r22
    3d66:	b7 07       	cpc	r27, r23
    3d68:	10 f0       	brcs	.+4      	; 0x3d6e <__udivmodhi4_ep>
    3d6a:	a6 1b       	sub	r26, r22
    3d6c:	b7 0b       	sbc	r27, r23

00003d6e <__udivmodhi4_ep>:
    3d6e:	88 1f       	adc	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	5a 95       	dec	r21
    3d74:	a9 f7       	brne	.-22     	; 0x3d60 <__udivmodhi4_loop>
    3d76:	80 95       	com	r24
    3d78:	90 95       	com	r25
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	08 95       	ret

00003d80 <_exit>:
    3d80:	f8 94       	cli

00003d82 <__stop_program>:
    3d82:	ff cf       	rjmp	.-2      	; 0x3d82 <__stop_program>
